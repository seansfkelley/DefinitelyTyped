// Generated from Plotly.js version 1.41.0

/* tslint:disable:max-line-length */
/* tslint:disable:member-ordering */

/*
 The classes below contain all event types found in the plotly.js source code.
 You can manually copy these into a file in your source tree (e.g.: plotly-events.model.ts) if you'd like to
 be able to look up event names via static properties (e.g.: PlotlyDataEvents.plotly_click) instead of remembering the event name strings.

// Plotly events that typically handle event data of type {CartesianEventPoint}.
export class PlotlyDataEvents {
  static plotly_unhover = "plotly_unhover";
  static plotly_click = "plotly_click";
  static plotly_hover = "plotly_hover";
  static plotly_selecting = "plotly_selecting";
  static plotly_selected = "plotly_selected";

}

// Plotly update events.
// Event data includes an array containing an object of updated attributes and an array of the trace numbers that were updated.
export class PlotlyUpdateEvents {
  static plotly_restyle = "plotly_restyle";
  static plotly_relayout = "plotly_relayout";

}

// Other Plotly events that either have no event data, or have custom event data (see Plotly docs or source code).
export class PlotlySimpleEvents {
  static newListener = "newListener";
  static removeListener = "removeListener";
  static plotly_clickannotation = "plotly_clickannotation";
  static plotly_beforehover = "plotly_beforehover";
  static plotly_legendclick = "plotly_legendclick";
  static plotly_legenddoubleclick = "plotly_legenddoubleclick";
  static plotly_sliderchange = "plotly_sliderchange";
  static plotly_sliderstart = "plotly_sliderstart";
  static plotly_sliderend = "plotly_sliderend";
  static plotly_buttonclicked = "plotly_buttonclicked";
  static plotly_webglcontextlost = "plotly_webglcontextlost";
  static plotly_beforeplot = "plotly_beforeplot";
  static plotly_afterplot = "plotly_afterplot";
  static plotly_redraw = "plotly_redraw";
  static plotly_update = "plotly_update";
  static plotly_react = "plotly_react";
  static plotly_animationinterrupted = "plotly_animationinterrupted";
  static plotly_animated = "plotly_animated";
  static plotly_animatingframe = "plotly_animatingframe";
  static plotly_animating = "plotly_animating";
  static plotly_framework = "plotly_framework";
  static plotly_doubleclick = "plotly_doubleclick";
  static plotly_deselect = "plotly_deselect";
  static plotly_beforeexport = "plotly_beforeexport";
  static plotly_afterexport = "plotly_afterexport";
  static plotly_autosize = "plotly_autosize";
  static plotly_transitioning = "plotly_transitioning";
  static plotly_transitioninterrupted = "plotly_transitioninterrupted";
  static plotly_transitioned = "plotly_transitioned";
  static error = "error";
  static success = "success";

}
 */

declare module plotly {
  /**
   * An HTML div element with additional properties added by Plotly.
   */
  export interface PlotlyDiv extends HTMLDivElement {
    data?: plotly.traces.BaseTrace[];

    /** User-defined layout config */
    layout?: plotly.layout.Layout;

    /** Full layout config (including user-defined config) */
    _fullLayout?: plotly.layout.Layout;

    /** Context seems to map to additionalConfig */
    _context?: any;

    emit?( event: any, data: any ): void;

    /**
     * To get full type checking on the event, you need to specify a type like this. It's overly verbose, but it's the only way to ensure
     * that all the generic types within the event can be determined:
     *
     * type eventType = plotly.event.DataEventData<plotly.event.CartesianEventPoint<plotly.traces.ScatterGL>, plotly.traces.ScatterGL>;
     * plotElement.on( PlotlyDataEvents.plotly_selected, ( eventData: eventType ) => {
     *   // Your code
     * });
     *
     * @param event {string} Event name
     * @param fn {( eventData: any ) => void} For event data type checking, specify data type and generics like:
     * plotly.event.DataEventData&lt;plotly.event.CartesianEventPoint&lt;plotly.traces.ScatterGL&gt;, plotly.traces.ScatterGL&gt;
     */
    on?( event: string, fn: ( eventData: any ) => void ): void;
  }
}

declare module plotly.event {

  export type PlotlyRestyleEventData = [
    /** Object of updated attributes */
    any,
    /** Array of the trace numbers that were updated */
    number[]
  ];

  interface PlotlyRelayoutEventData {}

  interface PlotlyCartesianRelayoutEventData extends PlotlyRelayoutEventData {
    xaxis: {
      range: [number, number],
      autorange: boolean
    };
    yaxis: {
      range: [number, number],
      autorange: boolean
    };
  }

  interface Plotly3DRelayoutEventData extends PlotlyRelayoutEventData {
    scene: {
      center: {x: number, y: number, z: number },
      eye: {x: number, y: number, z: number },
      up: {x: number, y: number, z: number }
    };
  }

  interface BaseDataEventPoint<T extends plotly.traces.BaseTrace> {
    /** index in data of the trace associated with the selected point */
    curveNumber: number;

    /** index of the selected point */
    pointNumber: number;

    /** ref to the trace as sent to Plotly.plot associated with the selected point */
    data: T;

    /** ref to the trace including all of the default attributes */
    fullData: T;

    /** ref to associated custom data object */
    customdata?: any;
  }

  interface CartesianEventPoint<T extends plotly.traces.BaseTrace> extends BaseDataEventPoint<T> {

    /** x value */
    x: number;

    /** y value */
    y: number;

    /** ref to x-axis object (i.e layout.xaxis) associated with the selected point */
    xaxis: plotly.layout.PlotlyAxis;

    /** ref to y-axis object */
    yaxis: plotly.layout.PlotlyAxis;
  }

  interface ThreeDEventPoint<T extends plotly.traces.BaseTrace> extends BaseDataEventPoint<T> {

    /** x value */
    x: number;

    /** y value */
    y: number;

    /** z value */
    z: number;

    /** ref to x-axis object (i.e layout.xaxis) associated with the selected point */
    xaxis: plotly.layout.PlotlyAxis;

    /** ref to y-axis object */
    yaxis: plotly.layout.PlotlyAxis;

    /** ref to z-axis object */
    zaxis: plotly.layout.PlotlyAxis;
  }

  interface MapEventPoint<T extends plotly.traces.BaseTrace> extends BaseDataEventPoint<T> {

    /** lat value */
    lat: number;

    /** lon value */
    lon: number;

    location: any;
  }

  interface PlotlyEventData {
    /** Actual type may vary, but is typically MouseEvent */
    event?: Event;
  }

  interface DataEventData<E extends BaseDataEventPoint<T>, T> extends PlotlyEventData {
    /** Array of CartesianEventPoint, ThreeDEventPoint, or MapEventPoint */
    points: E[];
  }
}

declare module plotly.layout {
  export interface PlotlyAxis {    /**
     * If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
     * Plotly @type: enumerated
     */
    anchor?: "free"|"/^x([2-9]|[1-9][0-9]+)?$/"|"/^y([2-9]|[1-9][0-9]+)?$/"|string;
    /**
     * Determines whether long tick labels automatically grow the figure margins.
     * @default "false"
     * Plotly @type: boolean
     */
    automargin?: boolean;
    /**
     * Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
     * @default: "true"
     * Plotly @type: enumerated
     */
    autorange?: true|false|"reversed";
    /**
     * Sets the background color of this axis' wall.
     * @default: "rgba(204, 204, 204, 0.5)"
     * Plotly @type: color
     */
    backgroundcolor?: string;
    /**
     * Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    calendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
     * Plotly @type: data_array
     */
    categoryarray?: any[];
    /**
     * Sets the source reference on plot.ly for  categoryarray .
     * Plotly @type: string
     */
    categoryarraysrc?: string;
    /**
     * Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.
     * @default: "trace"
     * Plotly @type: enumerated
     */
    categoryorder?: "trace"|"category ascending"|"category descending"|"array";
    /**
     * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
     * @default: "#444"
     * Plotly @type: color
     */
    color?: string;
    /**
     * If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range* (default), or by decreasing the *domain*.
     * @default: "range"
     * Plotly @type: enumerated
     */
    constrain?: "range"|"domain";
    /**
     * If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
     * Plotly @type: enumerated
     */
    constraintoward?: "left"|"center"|"right"|"top"|"middle"|"bottom";
    /**
     * Sets the domain of this axis (in plot fraction).
     * @default: "[0, 1]"
     * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
     */
    domain?: [number, number];
    /**
     * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
     * Plotly @type: any
     */
    dtick?: any;
    /**
     * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
     * @default: "B"
     * Plotly @type: enumerated
     */
    exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B";
    /**
     * Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
     * @default: "false"
     * Plotly @type: boolean
     */
    fixedrange?: boolean;
    /**
     * Sets the color of the grid lines.
     * @default: "rgb(204, 204, 204)"
     * Plotly @type: color
     */
    gridcolor?: string;
    /**
     * Sets the width (in px) of the grid lines.
     * @default: "1"
     * Plotly @type: number
     */
    gridwidth?: number;
    /**
     * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
     * Plotly @type: string
     */
    hoverformat?: string;
    /**
     * Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
     * @default: "above traces"
     * Plotly @type: enumerated
     */
    layer?: "above traces"|"below traces";
    /**
     * Sets the axis line color.
     * @default: "#444"
     * Plotly @type: color
     */
    linecolor?: string;
    /**
     * Sets the width (in px) of the axis line.
     * @default: "1"
     * Plotly @type: number
     */
    linewidth?: number;
    /**
     * Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
     * @default: "false"
     * Plotly @type: enumerated
     */
    mirror?: true|"ticks"|false|"all"|"allticks";
    /**
     * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
     * @default: "0"
     * Plotly @type: integer
     */
    nticks?: number;
    /**
     * If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes.
     * Plotly @type: enumerated
     */
    overlaying?: "free"|"/^x([2-9]|[1-9][0-9]+)?$/"|"/^y([2-9]|[1-9][0-9]+)?$/"|string;
    /**
     * Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.
     * @default: "0"
     * Plotly @type: number
     */
    position?: number;
    /**
     * Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
     * Plotly @type: info_array ([[valType:any, editType:plot, impliedEdits:[^autorange:false]], [valType:any, editType:plot, impliedEdits:[^autorange:false]]])
     */
    range?: [any, any];
    /**
     * If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
     * @default: "normal"
     * Plotly @type: enumerated
     */
    rangemode?: "normal"|"tozero"|"nonnegative";
    rangeselector?: {
      /**
       * Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*.
       * Plotly @type: boolean
       */
      visible?: boolean,
      buttons?: {
        /**
         * Determines whether or not this button is visible.
         * @default: "true"
         * Plotly @type: boolean
         */
        visible?: boolean,
        /**
         * The unit of measurement that the `count` value will set the range by.
         * @default: "month"
         * Plotly @type: enumerated
         */
        step?: "month"|"year"|"day"|"hour"|"minute"|"second"|"all",
        /**
         * Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year. Month and year *todate* are currently available only for the built-in (Gregorian) calendar.
         * @default: "backward"
         * Plotly @type: enumerated
         */
        stepmode?: "backward"|"todate",
        /**
         * Sets the number of steps to take to update the range. Use with `step` to specify the update interval.
         * @default: "1"
         * Plotly @type: number
         */
        count?: number,
        /**
         * Sets the text label to appear on the button.
         * Plotly @type: string
         */
        label?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets the x position (in normalized coordinates) of the range selector.
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "auto"|"left"|"center"|"right",
      /**
       * Sets the y position (in normalized coordinates) of the range selector.
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
       * @default: "bottom"
       * Plotly @type: enumerated
       */
      yanchor?: "auto"|"top"|"middle"|"bottom",
      /**
       * Sets the font of the range selector button text.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the background color of the range selector buttons.
       * @default: "#eee"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the background color of the active range selector button.
       * Plotly @type: color
       */
      activecolor?: string,
      /**
       * Sets the color of the border enclosing the range selector.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) of the border enclosing the range selector.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
    };
    rangeslider?: {
      /**
       * Sets the background color of the range slider.
       * @default: "#fff"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the border color of the range slider.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the border color of the range slider.
       * @default: "0"
       * Plotly @type: integer
       */
      borderwidth?: number,
      /**
       * Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then `autorange` is set to *false*.
       * @default: "true"
       * Plotly @type: boolean
       */
      autorange?: boolean,
      /**
       * Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: info_array ([[valType:any, editType:calc, impliedEdits:[^autorange:false]], [valType:any, editType:calc, impliedEdits:[^autorange:false]]])
       */
      range?: [any, any],
      /**
       * The height of the range slider as a fraction of the total plot area height.
       * @default: "0.15"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`
       * @default: "true"
       * Plotly @type: boolean
       */
      visible?: boolean,
      yaxis?: PlotlyAxis,
    };
    /**
     * If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`.
     * Plotly @type: enumerated
     */
    scaleanchor?: "/^x([2-9]|[1-9][0-9]+)?$/"|"/^y([2-9]|[1-9][0-9]+)?$/"|string;
    /**
     * If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.
     * @default: "1"
     * Plotly @type: number
     */
    scaleratio?: number;
    /**
     * If "true", even 4-digit integers are separated
     * @default: "false"
     * Plotly @type: boolean
     */
    separatethousands?: boolean;
    /**
     * Sets whether or not this axis is labeled
     * @default: "true"
     * Plotly @type: boolean
     */
    showaxeslabels?: boolean;
    /**
     * Sets whether or not this axis' wall has a background color.
     * @default: "false"
     * Plotly @type: boolean
     */
    showbackground?: boolean;
    /**
     * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
     * @default: "all"
     * Plotly @type: enumerated
     */
    showexponent?: "all"|"first"|"last"|"none";
    /**
     * Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
     * Plotly @type: boolean
     */
    showgrid?: boolean;
    /**
     * Determines whether or not a line bounding this axis is drawn.
     * @default: "false"
     * Plotly @type: boolean
     */
    showline?: boolean;
    /**
     * Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
     * @default: "true"
     * Plotly @type: boolean
     */
    showspikes?: boolean;
    /**
     * Determines whether or not the tick labels are drawn.
     * @default: "true"
     * Plotly @type: boolean
     */
    showticklabels?: boolean;
    /**
     * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
     * @default: "all"
     * Plotly @type: enumerated
     */
    showtickprefix?: "all"|"first"|"last"|"none";
    /**
     * Same as `showtickprefix` but for tick suffixes.
     * @default: "all"
     * Plotly @type: enumerated
     */
    showticksuffix?: "all"|"first"|"last"|"none";
    /**
     * Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
     * Plotly @type: enumerated
     */
    side?: "top"|"bottom"|"left"|"right";
    /**
     * Sets the color of the spikes.
     * @default: "#444"
     * Plotly @type: color
     */
    spikecolor?: string;
    /**
     * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
     * @default: "dash"
     * Plotly @type: string
     */
    spikedash?: string;
    /**
     * Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
     * @default: "toaxis"
     * Plotly @type: flaglist
     */
    spikemode?: "toaxis"|"across"|"marker";
    /**
     * Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
     * @default: "true"
     * Plotly @type: boolean
     */
    spikesides?: boolean;
    /**
     * Determines whether spikelines are stuck to the cursor or to the closest datapoints.
     * @default: "data"
     * Plotly @type: enumerated
     */
    spikesnap?: "data"|"cursor";
    /**
     * Sets the thickness (in px) of the spikes.
     * @default: "2"
     * Plotly @type: number
     */
    spikethickness?: number;
    /**
     * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
     * Plotly @type: any
     */
    tick0?: any;
    /**
     * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
     * @default: "auto"
     * Plotly @type: angle
     */
    tickangle?: number;
    /**
     * Sets the tick color.
     * @default: "#444"
     * Plotly @type: color
     */
    tickcolor?: string;
    /**
     * Sets the tick font.
     */
    tickfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
     * Plotly @type: string
     */
    tickformat?: string;
    tickformatstops?: {
      /**
       * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
       * @default: "true"
       * Plotly @type: boolean
       */
      enabled?: boolean,
      /**
       * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
       * Plotly @type: info_array ([[valType:any, editType:plot], [valType:any, editType:plot]])
       */
      dtickrange?: [any, any],
      /**
       * string - dtickformat for described zoom level, the same as *tickformat*
       * Plotly @type: string
       */
      value?: string,
      /**
       * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
       * Plotly @type: string
       */
      name?: string,
      /**
       * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
       * Plotly @type: string
       */
      templateitemname?: string,
    }[];
    /**
     * Sets the tick length (in px).
     * @default: "5"
     * Plotly @type: number
     */
    ticklen?: number;
    /**
     * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
     * Plotly @type: enumerated
     */
    tickmode?: "auto"|"linear"|"array";
    /**
     * Sets a tick label prefix.
     * Plotly @type: string
     */
    tickprefix?: string;
    /**
     * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
     * Plotly @type: enumerated
     */
    ticks?: "outside"|"inside"|"";
    /**
     * Sets a tick label suffix.
     * Plotly @type: string
     */
    ticksuffix?: string;
    /**
     * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
     * Plotly @type: data_array
     */
    ticktext?: any[];
    /**
     * Sets the source reference on plot.ly for  ticktext .
     * Plotly @type: string
     */
    ticktextsrc?: string;
    /**
     * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
     * Plotly @type: data_array
     */
    tickvals?: any[];
    /**
     * Sets the source reference on plot.ly for  tickvals .
     * Plotly @type: string
     */
    tickvalssrc?: string;
    /**
     * Sets the tick width (in px).
     * @default: "1"
     * Plotly @type: number
     */
    tickwidth?: number;
    /**
     * Sets the title of this axis.
     * Plotly @type: string
     */
    title?: string;
    /**
     * Sets this axis' title font.
     */
    titlefont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
     * @default: "-"
     * Plotly @type: enumerated
     */
    type?: "-"|"linear"|"log"|"date"|"category";
    /**
     * A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
     * Plotly @type: boolean
     */
    visible?: boolean;
    /**
     * Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
     * Plotly @type: boolean
     */
    zeroline?: boolean;
    /**
     * Sets the line color of the zero line.
     * @default: "#444"
     * Plotly @type: color
     */
    zerolinecolor?: string;
    /**
     * Sets the width (in px) of the zero line.
     * @default: "1"
     * Plotly @type: number
     */
    zerolinewidth?: number;
}
  export interface Layout {
    /**
     * Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.
     */
    font?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * @default: ""Open Sans", verdana, arial, sans-serif"
       * Plotly @type: string
       */
      family?: string,
      /**
       * @default: "12"
       * Plotly @type: number
       */
      size?: number,
      /**
       * @default: "#444"
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets the plot's title.
     * Plotly @type: string
     */
    title?: string;
    /**
     * Sets the title font.
     */
    titlefont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.
     * @default: "false"
     * Plotly @type: boolean
     */
    autosize?: boolean;
    /**
     * Sets the plot's width (in px).
     * @default: "700"
     * Plotly @type: number
     */
    width?: number;
    /**
     * Sets the plot's height (in px).
     * @default: "450"
     * Plotly @type: number
     */
    height?: number;
    margin?: {
      /**
       * Sets the left margin (in px).
       * @default: "80"
       * Plotly @type: number
       */
      l?: number,
      /**
       * Sets the right margin (in px).
       * @default: "80"
       * Plotly @type: number
       */
      r?: number,
      /**
       * Sets the top margin (in px).
       * @default: "100"
       * Plotly @type: number
       */
      t?: number,
      /**
       * Sets the bottom margin (in px).
       * @default: "80"
       * Plotly @type: number
       */
      b?: number,
      /**
       * Sets the amount of padding (in px) between the plotting area and the axis lines
       * @default: "0"
       * Plotly @type: number
       */
      pad?: number,
      /**
       * @default: "true"
       * Plotly @type: boolean
       */
      autoexpand?: boolean,
    };
    /**
     * Sets the color of paper where the graph is drawn.
     * @default: "#fff"
     * Plotly @type: color
     */
    paper_bgcolor?: string;
    /**
     * Sets the color of plotting area in-between x and y axes.
     * @default: "#fff"
     * Plotly @type: color
     */
    plot_bgcolor?: string;
    /**
     * Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands. In English locales, dflt is *.,* but other locales may alter this default.
     * Plotly @type: string
     */
    separators?: string;
    /**
     * Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the plotly service (at https://plot.ly or on-premise).
     * @default: "false"
     * Plotly @type: boolean
     */
    hidesources?: boolean;
    /**
     * Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the default trace colors.
     * @default: "[#1f77b4, #ff7f0e, #2ca02c, #d62728, #9467bd, #8c564b, #e377c2, #7f7f7f, #bcbd22, #17becf]"
     * Plotly @type: colorlist
     */
    colorway?: string[];
    /**
     * If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.
     * Plotly @type: any
     */
    datarevision?: any;
    /**
     * Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace.  Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.
     * Plotly @type: any
     */
    template?: any;
    /**
     * Determines the mode of single click interactions. *event* is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes *lasso* and *select*, but with no event data attached (kept for compatibility reasons). The *select* flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. *select* with `hovermode`: *x* can be confusing, consider explicitly setting `hovermode`: *closest* when using this feature. Selection events are sent accordingly as long as *event* flag is set as well. When the *event* flag is missing, `plotly_click` and `plotly_selected` events are not fired.
     * @default: "event"
     * Plotly @type: flaglist
     */
    clickmode?: "event"|"select"|"none";
    /**
     * Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.
     * @default: "zoom"
     * Plotly @type: enumerated
     */
    dragmode?: "zoom"|"pan"|"select"|"lasso"|"orbit"|"turntable";
    /**
     * Determines the mode of hover interactions. If `clickmode` includes the *select* flag, `hovermode` defaults to *closest*. If `clickmode` lacks the *select* flag, it defaults to *x* or *y* (depending on the trace's `orientation` value) for plots based on cartesian coordinates. For anything else the default value is *closest*.
     * Plotly @type: enumerated
     */
    hovermode?: "x"|"y"|"closest"|false;
    /**
     * Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.
     * @default: "20"
     * Plotly @type: integer
     */
    hoverdistance?: number;
    /**
     * Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.
     * @default: "20"
     * Plotly @type: integer
     */
    spikedistance?: number;
    hoverlabel?: {
      /**
       * Sets the background color of all hover labels on graph
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the border color of all hover labels on graph.
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the default hover label font used by all traces on the graph.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * @default: "Arial, sans-serif"
         * Plotly @type: string
         */
        family?: string,
        /**
         * @default: "13"
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * @default: "15"
       * Plotly @type: integer
       */
      namelength?: number,
    };
    /**
     * When "dragmode" is set to "select", this limits the selection of the drag to horizontal, vertical or diagonal. "h" only allows horizontal selection, "v" only vertical, "d" only diagonal and "any" sets no limit.
     * @default: "any"
     * Plotly @type: enumerated
     */
    selectdirection?: "h"|"v"|"d"|"any";
    grid?: {
      /**
       * The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.
       * Plotly @type: integer
       */
      rows?: number,
      /**
       * Is the first row the top or the bottom? Note that columns are always enumerated from left to right.
       * @default: "top to bottom"
       * Plotly @type: enumerated
       */
      roworder?: "top to bottom"|"bottom to top",
      /**
       * The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.
       * Plotly @type: integer
       */
      columns?: number,
      /**
       * Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like *xy* or *x3y2*, or ** to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.
       * Plotly @type: info_array ([[valType:enumerated, values:[/^x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?$/, ], editType:plot]])
       */
      subplots?: [string],
      /**
       * Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like *x*, *x2*, etc., or ** to not put an x axis in that column. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.
       * Plotly @type: info_array ([[valType:enumerated, values:[/^x([2-9]|[1-9][0-9]+)?$/, ], editType:plot]])
       */
      xaxes?: [string],
      /**
       * Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like *y*, *y2*, etc., or ** to not put a y axis in that row. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.
       * Plotly @type: info_array ([[valType:enumerated, values:[/^y([2-9]|[1-9][0-9]+)?$/, ], editType:plot]])
       */
      yaxes?: [string],
      /**
       * If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: *coupled* gives one x axis per column and one y axis per row. *independent* uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.
       * @default: "coupled"
       * Plotly @type: enumerated
       */
      pattern?: "independent"|"coupled",
      /**
       * Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.
       * Plotly @type: number
       */
      xgap?: number,
      /**
       * Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.
       * Plotly @type: number
       */
      ygap?: number,
      domain?: {
        /**
         * Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        x?: [number, number],
        /**
         * Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        y?: [number, number],
      },
      /**
       * Sets where the x axis labels and titles go. *bottom* means the very bottom of the grid. *bottom plot* is the lowest plot that each x axis is used in. *top* and *top plot* are similar.
       * @default: "bottom plot"
       * Plotly @type: enumerated
       */
      xside?: "bottom"|"bottom plot"|"top plot"|"top",
      /**
       * Sets where the y axis labels and titles go. *left* means the very left edge of the grid. *left plot* is the leftmost plot that each y axis is used in. *right* and *right plot* are similar.
       * @default: "left plot"
       * Plotly @type: enumerated
       */
      yside?: "left"|"left plot"|"right plot"|"right",
    };
    /**
     * Sets the default calendar system to use for interpreting and displaying dates throughout the plot.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    calendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    xaxis?: PlotlyAxis;
    xaxis2?: PlotlyAxis;
    xaxis3?: PlotlyAxis;
    xaxis4?: PlotlyAxis;
    yaxis?: PlotlyAxis;
    yaxis2?: PlotlyAxis;
    yaxis3?: PlotlyAxis;
    yaxis4?: PlotlyAxis;
    ternary?: {
      domain?: {
        /**
         * Sets the horizontal domain of this ternary subplot (in plot fraction).
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        x?: [number, number],
        /**
         * Sets the vertical domain of this ternary subplot (in plot fraction).
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        y?: [number, number],
        /**
         * If there is a layout grid, use the domain for this row in the grid for this ternary subplot .
         * @default: "0"
         * Plotly @type: integer
         */
        row?: number,
        /**
         * If there is a layout grid, use the domain for this column in the grid for this ternary subplot .
         * @default: "0"
         * Plotly @type: integer
         */
        column?: number,
      },
      /**
       * Set the background color of the subplot
       * @default: "#fff"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * The number each triplet should sum to, and the maximum range of each axis
       * @default: "1"
       * Plotly @type: number
       */
      sum?: number,
      aaxis?: {
        /**
         * Sets the title of this axis.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this axis' title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "6"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Sets the tick font.
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:plot], [valType:any, editType:plot]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        hoverformat?: string,
        /**
         * Determines whether or not a line bounding this axis is drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showline?: boolean,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        linecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        linewidth?: number,
        /**
         * Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
         * @default: "true"
         * Plotly @type: boolean
         */
        showgrid?: boolean,
        /**
         * Sets the color of the grid lines.
         * @default: "#eee"
         * Plotly @type: color
         */
        gridcolor?: string,
        /**
         * Sets the width (in px) of the grid lines.
         * @default: "1"
         * Plotly @type: number
         */
        gridwidth?: number,
        /**
         * Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
         * @default: "above traces"
         * Plotly @type: enumerated
         */
        layer?: "above traces"|"below traces",
        /**
         * The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
         * @default: "0"
         * Plotly @type: number
         */
        min?: number,
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      baxis?: {
        /**
         * Sets the title of this axis.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this axis' title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "6"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Sets the tick font.
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:plot], [valType:any, editType:plot]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        hoverformat?: string,
        /**
         * Determines whether or not a line bounding this axis is drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showline?: boolean,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        linecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        linewidth?: number,
        /**
         * Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
         * @default: "true"
         * Plotly @type: boolean
         */
        showgrid?: boolean,
        /**
         * Sets the color of the grid lines.
         * @default: "#eee"
         * Plotly @type: color
         */
        gridcolor?: string,
        /**
         * Sets the width (in px) of the grid lines.
         * @default: "1"
         * Plotly @type: number
         */
        gridwidth?: number,
        /**
         * Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
         * @default: "above traces"
         * Plotly @type: enumerated
         */
        layer?: "above traces"|"below traces",
        /**
         * The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
         * @default: "0"
         * Plotly @type: number
         */
        min?: number,
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      caxis?: {
        /**
         * Sets the title of this axis.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this axis' title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "6"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Sets the tick font.
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:plot], [valType:any, editType:plot]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        hoverformat?: string,
        /**
         * Determines whether or not a line bounding this axis is drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showline?: boolean,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        linecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        linewidth?: number,
        /**
         * Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
         * @default: "true"
         * Plotly @type: boolean
         */
        showgrid?: boolean,
        /**
         * Sets the color of the grid lines.
         * @default: "#eee"
         * Plotly @type: color
         */
        gridcolor?: string,
        /**
         * Sets the width (in px) of the grid lines.
         * @default: "1"
         * Plotly @type: number
         */
        gridwidth?: number,
        /**
         * Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
         * @default: "above traces"
         * Plotly @type: enumerated
         */
        layer?: "above traces"|"below traces",
        /**
         * The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
         * @default: "0"
         * Plotly @type: number
         */
        min?: number,
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
    };
    scene?: {
      /**
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      camera?: {
        /**
         * Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up.
         */
        up?: {
          /**
           * @default: "0"
           * Plotly @type: number
           */
          x?: number,
          /**
           * @default: "0"
           * Plotly @type: number
           */
          y?: number,
          /**
           * @default: "1"
           * Plotly @type: number
           */
          z?: number,
        },
        /**
         * Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.
         */
        center?: {
          /**
           * @default: "0"
           * Plotly @type: number
           */
          x?: number,
          /**
           * @default: "0"
           * Plotly @type: number
           */
          y?: number,
          /**
           * @default: "0"
           * Plotly @type: number
           */
          z?: number,
        },
        /**
         * Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.
         */
        eye?: {
          /**
           * @default: "1.25"
           * Plotly @type: number
           */
          x?: number,
          /**
           * @default: "1.25"
           * Plotly @type: number
           */
          y?: number,
          /**
           * @default: "1.25"
           * Plotly @type: number
           */
          z?: number,
        },
      },
      domain?: {
        /**
         * Sets the horizontal domain of this scene subplot (in plot fraction).
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        x?: [number, number],
        /**
         * Sets the vertical domain of this scene subplot (in plot fraction).
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        y?: [number, number],
        /**
         * If there is a layout grid, use the domain for this row in the grid for this scene subplot .
         * @default: "0"
         * Plotly @type: integer
         */
        row?: number,
        /**
         * If there is a layout grid, use the domain for this column in the grid for this scene subplot .
         * @default: "0"
         * Plotly @type: integer
         */
        column?: number,
      },
      /**
       * If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.
       * @default: "auto"
       * Plotly @type: enumerated
       */
      aspectmode?: "auto"|"cube"|"data"|"manual",
      /**
       * Sets this scene's axis aspectratio.
       */
      aspectratio?: {
        /**
         * Plotly @type: number
         */
        x?: number,
        /**
         * Plotly @type: number
         */
        y?: number,
        /**
         * Plotly @type: number
         */
        z?: number,
        impliedEdits?: {
        },
      },
      xaxis?: PlotlyAxis,
      yaxis?: PlotlyAxis,
      zaxis?: PlotlyAxis,
      /**
       * Determines the mode of drag interactions for this scene.
       * @default: "turntable"
       * Plotly @type: enumerated
       */
      dragmode?: "orbit"|"turntable"|"zoom"|"pan"|false,
      /**
       * Determines the mode of hover interactions for this scene.
       * @default: "closest"
       * Plotly @type: enumerated
       */
      hovermode?: "closest"|false,
      annotations?: {
        /**
         * Determines whether or not this annotation is visible.
         * @default: "true"
         * Plotly @type: boolean
         */
        visible?: boolean,
        /**
         * Sets the annotation's x position.
         * Plotly @type: any
         */
        x?: any,
        /**
         * Sets the annotation's y position.
         * Plotly @type: any
         */
        y?: any,
        /**
         * Sets the annotation's z position.
         * Plotly @type: any
         */
        z?: any,
        /**
         * Sets the x component of the arrow tail about the arrow head (in pixels).
         * Plotly @type: number
         */
        ax?: number,
        /**
         * Sets the y component of the arrow tail about the arrow head (in pixels).
         * Plotly @type: number
         */
        ay?: number,
        /**
         * Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
         * @default: "auto"
         * Plotly @type: enumerated
         */
        xanchor?: "auto"|"left"|"center"|"right",
        /**
         * Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.
         * @default: "0"
         * Plotly @type: number
         */
        xshift?: number,
        /**
         * Sets the text box's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
         * @default: "auto"
         * Plotly @type: enumerated
         */
        yanchor?: "auto"|"top"|"middle"|"bottom",
        /**
         * Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.
         * @default: "0"
         * Plotly @type: number
         */
        yshift?: number,
        /**
         * Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported.
         * Plotly @type: string
         */
        text?: string,
        /**
         * Sets the angle at which the `text` is drawn with respect to the horizontal.
         * @default: "0"
         * Plotly @type: angle
         */
        textangle?: number,
        /**
         * Sets the annotation text font.
         */
        font?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.
         * Plotly @type: number
         */
        width?: number,
        /**
         * Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.
         * Plotly @type: number
         */
        height?: number,
        /**
         * Sets the opacity of the annotation (text + arrow).
         * @default: "1"
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans more two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
         * @default: "center"
         * Plotly @type: enumerated
         */
        align?: "left"|"center"|"right",
        /**
         * Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        valign?: "top"|"middle"|"bottom",
        /**
         * Sets the background color of the annotation.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the color of the border enclosing the annotation `text`.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the padding (in px) between the `text` and the enclosing border.
         * @default: "1"
         * Plotly @type: number
         */
        borderpad?: number,
        /**
         * Sets the width (in px) of the border enclosing the annotation `text`.
         * @default: "1"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.
         * @default: "true"
         * Plotly @type: boolean
         */
        showarrow?: boolean,
        /**
         * Sets the color of the annotation arrow.
         * Plotly @type: color
         */
        arrowcolor?: string,
        /**
         * Sets the end annotation arrow head style.
         * @default: "1"
         * Plotly @type: integer
         */
        arrowhead?: number,
        /**
         * Sets the start annotation arrow head style.
         * @default: "1"
         * Plotly @type: integer
         */
        startarrowhead?: number,
        /**
         * Sets the annotation arrow head position.
         * @default: "end"
         * Plotly @type: flaglist
         */
        arrowside?: "end"|"start"|"none",
        /**
         * Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.
         * @default: "1"
         * Plotly @type: number
         */
        arrowsize?: number,
        /**
         * Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.
         * @default: "1"
         * Plotly @type: number
         */
        startarrowsize?: number,
        /**
         * Sets the width (in px) of annotation arrow line.
         * Plotly @type: number
         */
        arrowwidth?: number,
        /**
         * Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.
         * @default: "0"
         * Plotly @type: number
         */
        standoff?: number,
        /**
         * Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.
         * @default: "0"
         * Plotly @type: number
         */
        startstandoff?: number,
        /**
         * Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.
         * Plotly @type: string
         */
        hovertext?: string,
        hoverlabel?: {
          /**
           * Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.
           * Plotly @type: color
           */
          bgcolor?: string,
          /**
           * Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.
           * Plotly @type: color
           */
          bordercolor?: string,
          /**
           * Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.
           */
          font?: {
            /**
             * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
             * Plotly @type: string
             */
            family?: string,
            /**
             * Plotly @type: number
             */
            size?: number,
            /**
             * Plotly @type: color
             */
            color?: string,
          },
        },
        /**
         * Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is *false* unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.
         * Plotly @type: boolean
         */
        captureevents?: boolean,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
    };
    geo?: {
      domain?: {
        /**
         * Sets the horizontal domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        x?: [number, number],
        /**
         * Sets the vertical domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        y?: [number, number],
        /**
         * If there is a layout grid, use the domain for this row in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
         * @default: "0"
         * Plotly @type: integer
         */
        row?: number,
        /**
         * If there is a layout grid, use the domain for this column in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
         * @default: "0"
         * Plotly @type: integer
         */
        column?: number,
      },
      /**
       * Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.
       * @default: "110"
       * Plotly @type: enumerated
       */
      resolution?: 110|50,
      /**
       * Set the scope of the map.
       * @default: "world"
       * Plotly @type: enumerated
       */
      scope?: "world"|"usa"|"europe"|"asia"|"africa"|"north america"|"south america",
      projection?: {
        /**
         * Sets the projection type.
         * Plotly @type: enumerated
         */
        type?: "equirectangular"|"mercator"|"orthographic"|"natural earth"|"kavrayskiy7"|"miller"|"robinson"|"eckert4"|"azimuthal equal area"|"azimuthal equidistant"|"conic equal area"|"conic conformal"|"conic equidistant"|"gnomonic"|"stereographic"|"mollweide"|"hammer"|"transverse mercator"|"albers usa"|"winkel tripel"|"aitoff"|"sinusoidal",
        rotation?: {
          /**
           * Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.
           * Plotly @type: number
           */
          lon?: number,
          /**
           * Rotates the map along meridians (in degrees North).
           * Plotly @type: number
           */
          lat?: number,
          /**
           * Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down.
           * Plotly @type: number
           */
          roll?: number,
        },
        /**
         * For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.
         * Plotly @type: info_array ([[valType:number, editType:plot], [valType:number, editType:plot]])
         */
        parallels?: [number, number],
        /**
         * Zooms in or out on the map view. A scale of *1* corresponds to the largest zoom level that fits the map's lon and lat ranges.
         * @default: "1"
         * Plotly @type: number
         */
        scale?: number,
      },
      center?: {
        /**
         * Sets the longitude of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise.
         * Plotly @type: number
         */
        lon?: number,
        /**
         * Sets the latitude of the map's center. For all projection types, the map's latitude center lies at the middle of the latitude range by default.
         * Plotly @type: number
         */
        lat?: number,
      },
      /**
       * Sets whether or not the coastlines are drawn.
       * Plotly @type: boolean
       */
      showcoastlines?: boolean,
      /**
       * Sets the coastline color.
       * @default: "#444"
       * Plotly @type: color
       */
      coastlinecolor?: string,
      /**
       * Sets the coastline stroke width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      coastlinewidth?: number,
      /**
       * Sets whether or not land masses are filled in color.
       * @default: "false"
       * Plotly @type: boolean
       */
      showland?: boolean,
      /**
       * Sets the land mass color.
       * @default: "#F0DC82"
       * Plotly @type: color
       */
      landcolor?: string,
      /**
       * Sets whether or not oceans are filled in color.
       * @default: "false"
       * Plotly @type: boolean
       */
      showocean?: boolean,
      /**
       * Sets the ocean color
       * @default: "#3399FF"
       * Plotly @type: color
       */
      oceancolor?: string,
      /**
       * Sets whether or not lakes are drawn.
       * @default: "false"
       * Plotly @type: boolean
       */
      showlakes?: boolean,
      /**
       * Sets the color of the lakes.
       * @default: "#3399FF"
       * Plotly @type: color
       */
      lakecolor?: string,
      /**
       * Sets whether or not rivers are drawn.
       * @default: "false"
       * Plotly @type: boolean
       */
      showrivers?: boolean,
      /**
       * Sets color of the rivers.
       * @default: "#3399FF"
       * Plotly @type: color
       */
      rivercolor?: string,
      /**
       * Sets the stroke width (in px) of the rivers.
       * @default: "1"
       * Plotly @type: number
       */
      riverwidth?: number,
      /**
       * Sets whether or not country boundaries are drawn.
       * Plotly @type: boolean
       */
      showcountries?: boolean,
      /**
       * Sets line color of the country boundaries.
       * @default: "#444"
       * Plotly @type: color
       */
      countrycolor?: string,
      /**
       * Sets line width (in px) of the country boundaries.
       * @default: "1"
       * Plotly @type: number
       */
      countrywidth?: number,
      /**
       * Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.
       * Plotly @type: boolean
       */
      showsubunits?: boolean,
      /**
       * Sets the color of the subunits boundaries.
       * @default: "#444"
       * Plotly @type: color
       */
      subunitcolor?: string,
      /**
       * Sets the stroke width (in px) of the subunits boundaries.
       * @default: "1"
       * Plotly @type: number
       */
      subunitwidth?: number,
      /**
       * Sets whether or not a frame is drawn around the map.
       * Plotly @type: boolean
       */
      showframe?: boolean,
      /**
       * Sets the color the frame.
       * @default: "#444"
       * Plotly @type: color
       */
      framecolor?: string,
      /**
       * Sets the stroke width (in px) of the frame.
       * @default: "1"
       * Plotly @type: number
       */
      framewidth?: number,
      /**
       * Set the background color of the map
       * @default: "#fff"
       * Plotly @type: color
       */
      bgcolor?: string,
      lonaxis?: {
        /**
         * Sets the range of this axis (in degrees), sets the map's clipped coordinates.
         * Plotly @type: info_array ([[valType:number, editType:plot], [valType:number, editType:plot]])
         */
        range?: [number, number],
        /**
         * Sets whether or not graticule are shown on the map.
         * @default: "false"
         * Plotly @type: boolean
         */
        showgrid?: boolean,
        /**
         * Sets the graticule's starting tick longitude/latitude.
         * Plotly @type: number
         */
        tick0?: number,
        /**
         * Sets the graticule's longitude/latitude tick step.
         * Plotly @type: number
         */
        dtick?: number,
        /**
         * Sets the graticule's stroke color.
         * @default: "#eee"
         * Plotly @type: color
         */
        gridcolor?: string,
        /**
         * Sets the graticule's stroke width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        gridwidth?: number,
      },
      lataxis?: {
        /**
         * Sets the range of this axis (in degrees), sets the map's clipped coordinates.
         * Plotly @type: info_array ([[valType:number, editType:plot], [valType:number, editType:plot]])
         */
        range?: [number, number],
        /**
         * Sets whether or not graticule are shown on the map.
         * @default: "false"
         * Plotly @type: boolean
         */
        showgrid?: boolean,
        /**
         * Sets the graticule's starting tick longitude/latitude.
         * Plotly @type: number
         */
        tick0?: number,
        /**
         * Sets the graticule's longitude/latitude tick step.
         * Plotly @type: number
         */
        dtick?: number,
        /**
         * Sets the graticule's stroke color.
         * @default: "#eee"
         * Plotly @type: color
         */
        gridcolor?: string,
        /**
         * Sets the graticule's stroke width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        gridwidth?: number,
      },
    };
    mapbox?: {
      domain?: {
        /**
         * Sets the horizontal domain of this mapbox subplot (in plot fraction).
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        x?: [number, number],
        /**
         * Sets the vertical domain of this mapbox subplot (in plot fraction).
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        y?: [number, number],
        /**
         * If there is a layout grid, use the domain for this row in the grid for this mapbox subplot .
         * @default: "0"
         * Plotly @type: integer
         */
        row?: number,
        /**
         * If there is a layout grid, use the domain for this column in the grid for this mapbox subplot .
         * @default: "0"
         * Plotly @type: integer
         */
        column?: number,
      },
      /**
       * Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`.
       * Plotly @type: string
       */
      accesstoken?: string,
      /**
       * Sets the Mapbox map style. Either input one of the default Mapbox style names or the URL to a custom style or a valid Mapbox style JSON.
       * @default: "basic"
       * Plotly @type: any
       */
      style?: any,
      center?: {
        /**
         * Sets the longitude of the center of the map (in degrees East).
         * @default: "0"
         * Plotly @type: number
         */
        lon?: number,
        /**
         * Sets the latitude of the center of the map (in degrees North).
         * @default: "0"
         * Plotly @type: number
         */
        lat?: number,
      },
      /**
       * Sets the zoom level of the map.
       * @default: "1"
       * Plotly @type: number
       */
      zoom?: number,
      /**
       * Sets the bearing angle of the map (in degrees counter-clockwise from North).
       * @default: "0"
       * Plotly @type: number
       */
      bearing?: number,
      /**
       * Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map).
       * @default: "0"
       * Plotly @type: number
       */
      pitch?: number,
      layers?: {
        /**
         * Determines whether this layer is displayed
         * @default: "true"
         * Plotly @type: boolean
         */
        visible?: boolean,
        /**
         * Sets the source type for this layer. Support for *raster*, *image* and *video* source types is coming soon.
         * @default: "geojson"
         * Plotly @type: enumerated
         */
        sourcetype?: "geojson"|"vector",
        /**
         * Sets the source data for this layer. Source can be either a URL, a geojson object (with `sourcetype` set to *geojson*) or an array of tile URLS (with `sourcetype` set to *vector*).
         * Plotly @type: any
         */
        source?: any,
        /**
         * Specifies the layer to use from a vector tile source. Required for *vector* source type that supports multiple layers.
         * Plotly @type: string
         */
        sourcelayer?: string,
        /**
         * Sets the layer type. Support for *raster*, *background* types is coming soon. Note that *line* and *fill* are not compatible with Point GeoJSON geometries.
         * @default: "circle"
         * Plotly @type: enumerated
         */
        type?: "circle"|"line"|"fill"|"symbol",
        /**
         * Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.
         * Plotly @type: string
         */
        below?: string,
        /**
         * Sets the primary layer color. If `type` is *circle*, color corresponds to the circle color If `type` is *line*, color corresponds to the line color If `type` is *fill*, color corresponds to the fill color If `type` is *symbol*, color corresponds to the icon color
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the opacity of the layer.
         * @default: "1"
         * Plotly @type: number
         */
        opacity?: number,
        circle?: {
          /**
           * Sets the circle radius. Has an effect only when `type` is set to *circle*.
           * @default: "15"
           * Plotly @type: number
           */
          radius?: number,
        },
        line?: {
          /**
           * Sets the line width. Has an effect only when `type` is set to *line*.
           * @default: "2"
           * Plotly @type: number
           */
          width?: number,
        },
        fill?: {
          /**
           * Sets the fill outline color. Has an effect only when `type` is set to *fill*.
           * @default: "#444"
           * Plotly @type: color
           */
          outlinecolor?: string,
        },
        symbol?: {
          /**
           * Sets the symbol icon image. Full list: https://www.mapbox.com/maki-icons/
           * @default: "marker"
           * Plotly @type: string
           */
          icon?: string,
          /**
           * Sets the symbol icon size. Has an effect only when `type` is set to *symbol*.
           * @default: "10"
           * Plotly @type: number
           */
          iconsize?: number,
          /**
           * Sets the symbol text.
           * Plotly @type: string
           */
          text?: string,
          /**
           * Sets the icon text font. Has an effect only when `type` is set to *symbol*.
           */
          textfont?: {
            /**
             * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
             * @default: "Open Sans Regular, Arial Unicode MS Regular"
             * Plotly @type: string
             */
            family?: string,
            /**
             * Plotly @type: number
             */
            size?: number,
            /**
             * Plotly @type: color
             */
            color?: string,
          },
          /**
           * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
           * @default: "middle center"
           * Plotly @type: enumerated
           */
          textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right",
        },
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
    };
    polar?: {
      domain?: {
        /**
         * Sets the horizontal domain of this polar subplot (in plot fraction).
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        x?: [number, number],
        /**
         * Sets the vertical domain of this polar subplot (in plot fraction).
         * @default: "[0, 1]"
         * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
         */
        y?: [number, number],
        /**
         * If there is a layout grid, use the domain for this row in the grid for this polar subplot .
         * @default: "0"
         * Plotly @type: integer
         */
        row?: number,
        /**
         * If there is a layout grid, use the domain for this column in the grid for this polar subplot .
         * @default: "0"
         * Plotly @type: integer
         */
        column?: number,
      },
      /**
       * Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with *0* corresponding to rightmost limit of the polar subplot.
       * @default: "[0, 360]"
       * Plotly @type: info_array ([[valType:number, editType:plot], [valType:number, editType:plot]])
       */
      sector?: [number, number],
      /**
       * Sets the fraction of the radius to cut out of the polar subplot.
       * @default: "0"
       * Plotly @type: number
       */
      hole?: number,
      /**
       * Set the background color of the subplot
       * @default: "#fff"
       * Plotly @type: color
       */
      bgcolor?: string,
      radialaxis?: {
        /**
         * A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
         * @default: "true"
         * Plotly @type: boolean
         */
        visible?: boolean,
        /**
         * Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
         * @default: "-"
         * Plotly @type: enumerated
         */
        type?: "-"|"linear"|"log"|"date"|"category",
        /**
         * Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
         * @default: "true"
         * Plotly @type: enumerated
         */
        autorange?: true|false|"reversed",
        /**
         * If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. If *normal*, the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).
         * @default: "tozero"
         * Plotly @type: enumerated
         */
        rangemode?: "tozero"|"nonnegative"|"normal",
        /**
         * Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: info_array ([[valType:any, editType:axrange, impliedEdits:[^autorange:false]], [valType:any, editType:axrange, impliedEdits:[^autorange:false]]])
         */
        range?: [any, any],
        /**
         * Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.
         * @default: "trace"
         * Plotly @type: enumerated
         */
        categoryorder?: "trace"|"category ascending"|"category descending"|"array",
        /**
         * Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
         * Plotly @type: data_array
         */
        categoryarray?: any[],
        /**
         * Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.
         * Plotly @type: angle
         */
        angle?: number,
        /**
         * Determines on which side of radial axis line the tick and tick labels appear.
         * @default: "clockwise"
         * Plotly @type: enumerated
         */
        side?: "clockwise"|"counterclockwise",
        /**
         * Sets the title of this axis.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this axis' title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        hoverformat?: string,
        /**
         * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Determines whether or not a line bounding this axis is drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showline?: boolean,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        linecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        linewidth?: number,
        /**
         * Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
         * @default: "true"
         * Plotly @type: boolean
         */
        showgrid?: boolean,
        /**
         * Sets the color of the grid lines.
         * @default: "#eee"
         * Plotly @type: color
         */
        gridcolor?: string,
        /**
         * Sets the width (in px) of the grid lines.
         * @default: "1"
         * Plotly @type: number
         */
        gridwidth?: number,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Sets the tick font.
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:plot], [valType:any, editType:plot]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
         * @default: "above traces"
         * Plotly @type: enumerated
         */
        layer?: "above traces"|"below traces",
        /**
         * Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
         * @default: "gregorian"
         * Plotly @type: enumerated
         */
        calendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura",
        /**
         * Sets the source reference on plot.ly for  categoryarray .
         * Plotly @type: string
         */
        categoryarraysrc?: string,
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      angularaxis?: {
        /**
         * A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
         * @default: "true"
         * Plotly @type: boolean
         */
        visible?: boolean,
        /**
         * Sets the angular axis type. If *linear*, set `thetaunit` to determine the unit in which axis value are shown. If *category, use `period` to set the number of integer coordinates around polar axis.
         * @default: "-"
         * Plotly @type: enumerated
         */
        type?: "-"|"linear"|"category",
        /**
         * Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.
         * @default: "trace"
         * Plotly @type: enumerated
         */
        categoryorder?: "trace"|"category ascending"|"category descending"|"array",
        /**
         * Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
         * Plotly @type: data_array
         */
        categoryarray?: any[],
        /**
         * Sets the format unit of the formatted *theta* values. Has an effect only when `angularaxis.type` is *linear*.
         * @default: "degrees"
         * Plotly @type: enumerated
         */
        thetaunit?: "radians"|"degrees",
        /**
         * Set the angular period. Has an effect only when `angularaxis.type` is *category*.
         * Plotly @type: number
         */
        period?: number,
        /**
         * Sets the direction corresponding to positive angles.
         * @default: "counterclockwise"
         * Plotly @type: enumerated
         */
        direction?: "counterclockwise"|"clockwise",
        /**
         * Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to *counterclockwise* get a `rotation` of *0* which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to *clockwise* get a rotation of *90* which corresponds to due North (like on a compass),
         * Plotly @type: angle
         */
        rotation?: number,
        /**
         * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        hoverformat?: string,
        /**
         * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Determines whether or not a line bounding this axis is drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showline?: boolean,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        linecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        linewidth?: number,
        /**
         * Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
         * @default: "true"
         * Plotly @type: boolean
         */
        showgrid?: boolean,
        /**
         * Sets the color of the grid lines.
         * @default: "#eee"
         * Plotly @type: color
         */
        gridcolor?: string,
        /**
         * Sets the width (in px) of the grid lines.
         * @default: "1"
         * Plotly @type: number
         */
        gridwidth?: number,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Sets the tick font.
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:plot], [valType:any, editType:plot]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
         * @default: "above traces"
         * Plotly @type: enumerated
         */
        layer?: "above traces"|"below traces",
        /**
         * Sets the source reference on plot.ly for  categoryarray .
         * Plotly @type: string
         */
        categoryarraysrc?: string,
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      /**
       * Determines if the radial axis grid lines and angular axis line are drawn as *circular* sectors or as *linear* (polygon) sectors. Has an effect only when the angular axis has `type` *category*. Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is *circular* (so that radial axis scale is the same as the data scale).
       * @default: "circular"
       * Plotly @type: enumerated
       */
      gridshape?: "circular"|"linear",
    };
    radialaxis?: {
      /**
       * Defines the start and end point of this radial axis.
       * Plotly @type: info_array ([[valType:number, editType:plot], [valType:number, editType:plot]])
       */
      range?: [number, number],
      /**
       * Polar chart subplots are not supported yet. This key has currently no effect.
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
       */
      domain?: [number, number],
      /**
       * Sets the orientation (an angle with respect to the origin) of the radial axis.
       * Plotly @type: number
       */
      orientation?: number,
      /**
       * Determines whether or not the line bounding this radial axis will be shown on the figure.
       * Plotly @type: boolean
       */
      showline?: boolean,
      /**
       * Determines whether or not the radial axis ticks will feature tick labels.
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the orientation (from the paper perspective) of the radial axis tick labels.
       * Plotly @type: enumerated
       */
      tickorientation?: "horizontal"|"vertical",
      /**
       * Sets the length of the tick lines on this radial axis.
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the color of the tick lines on this radial axis.
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Sets the length of the tick lines on this radial axis.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Plotly @type: number
       */
      endpadding?: number,
      /**
       * Determines whether or not this axis will be visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
    };
    angularaxis?: {
      /**
       * Defines the start and end point of this angular axis.
       * Plotly @type: info_array ([[valType:number, dflt:0, editType:plot], [valType:number, dflt:360, editType:plot]])
       */
      range?: [number, number],
      /**
       * Polar chart subplots are not supported yet. This key has currently no effect.
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:plot], [valType:number, min:0, max:1, editType:plot]])
       */
      domain?: [number, number],
      /**
       * Determines whether or not the line bounding this angular axis will be shown on the figure.
       * Plotly @type: boolean
       */
      showline?: boolean,
      /**
       * Determines whether or not the angular axis ticks will feature tick labels.
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the orientation (from the paper perspective) of the angular axis tick labels.
       * Plotly @type: enumerated
       */
      tickorientation?: "horizontal"|"vertical",
      /**
       * Sets the length of the tick lines on this angular axis.
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the color of the tick lines on this angular axis.
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Sets the length of the tick lines on this angular axis.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Plotly @type: number
       */
      endpadding?: number,
      /**
       * Determines whether or not this axis will be visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
    };
    /**
     * For polar plots only. Sets the direction corresponding to positive angles.
     * Plotly @type: enumerated
     */
    direction?: "clockwise"|"counterclockwise";
    /**
     * For polar plots only. Rotates the entire polar by the given angle.
     * Plotly @type: angle
     */
    orientation?: number;
    legend?: {
      /**
       * Sets the legend background color.
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the color of the border enclosing the legend.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) of the border enclosing the legend.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the font used to text the legend items.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the orientation of the legend.
       * @default: "v"
       * Plotly @type: enumerated
       */
      orientation?: "v"|"h",
      /**
       * Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.
       * Plotly @type: flaglist
       */
      traceorder?: "reversed"|"grouped"|"normal",
      /**
       * Sets the amount of vertical space (in px) between legend groups.
       * @default: "10"
       * Plotly @type: number
       */
      tracegroupgap?: number,
      /**
       * Sets the x position (in normalized coordinates) of the legend.
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "auto"|"left"|"center"|"right",
      /**
       * Sets the y position (in normalized coordinates) of the legend.
       * @default: "1"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend.
       * @default: "auto"
       * Plotly @type: enumerated
       */
      yanchor?: "auto"|"top"|"middle"|"bottom",
    };
    annotations?: {
      /**
       * Determines whether or not this annotation is visible.
       * @default: "true"
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported.
       * Plotly @type: string
       */
      text?: string,
      /**
       * Sets the angle at which the `text` is drawn with respect to the horizontal.
       * @default: "0"
       * Plotly @type: angle
       */
      textangle?: number,
      /**
       * Sets the annotation text font.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.
       * Plotly @type: number
       */
      height?: number,
      /**
       * Sets the opacity of the annotation (text + arrow).
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number,
      /**
       * Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans more two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
       * @default: "center"
       * Plotly @type: enumerated
       */
      align?: "left"|"center"|"right",
      /**
       * Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      valign?: "top"|"middle"|"bottom",
      /**
       * Sets the background color of the annotation.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the color of the border enclosing the annotation `text`.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the padding (in px) between the `text` and the enclosing border.
       * @default: "1"
       * Plotly @type: number
       */
      borderpad?: number,
      /**
       * Sets the width (in px) of the border enclosing the annotation `text`.
       * @default: "1"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.
       * @default: "true"
       * Plotly @type: boolean
       */
      showarrow?: boolean,
      /**
       * Sets the color of the annotation arrow.
       * Plotly @type: color
       */
      arrowcolor?: string,
      /**
       * Sets the end annotation arrow head style.
       * @default: "1"
       * Plotly @type: integer
       */
      arrowhead?: number,
      /**
       * Sets the start annotation arrow head style.
       * @default: "1"
       * Plotly @type: integer
       */
      startarrowhead?: number,
      /**
       * Sets the annotation arrow head position.
       * @default: "end"
       * Plotly @type: flaglist
       */
      arrowside?: "end"|"start"|"none",
      /**
       * Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.
       * @default: "1"
       * Plotly @type: number
       */
      arrowsize?: number,
      /**
       * Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.
       * @default: "1"
       * Plotly @type: number
       */
      startarrowsize?: number,
      /**
       * Sets the width (in px) of annotation arrow line.
       * Plotly @type: number
       */
      arrowwidth?: number,
      /**
       * Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.
       * @default: "0"
       * Plotly @type: number
       */
      standoff?: number,
      /**
       * Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.
       * @default: "0"
       * Plotly @type: number
       */
      startstandoff?: number,
      /**
       * Sets the x component of the arrow tail about the arrow head. If `axref` is `pixel`, a positive (negative)  component corresponds to an arrow pointing from right to left (left to right). If `axref` is an axis, this is an absolute value on that axis, like `x`, NOT a relative value.
       * Plotly @type: any
       */
      ax?: any,
      /**
       * Sets the y component of the arrow tail about the arrow head. If `ayref` is `pixel`, a positive (negative)  component corresponds to an arrow pointing from bottom to top (top to bottom). If `ayref` is an axis, this is an absolute value on that axis, like `y`, NOT a relative value.
       * Plotly @type: any
       */
      ay?: any,
      /**
       * Indicates in what terms the tail of the annotation (ax,ay)  is specified. If `pixel`, `ax` is a relative offset in pixels  from `x`. If set to an x axis id (e.g. *x* or *x2*), `ax` is  specified in the same terms as that axis. This is useful  for trendline annotations which should continue to indicate  the correct trend when zoomed.
       * @default: "pixel"
       * Plotly @type: enumerated
       */
      axref?: "pixel"|"/^x([2-9]|[1-9][0-9]+)?$/"|string,
      /**
       * Indicates in what terms the tail of the annotation (ax,ay)  is specified. If `pixel`, `ay` is a relative offset in pixels  from `y`. If set to a y axis id (e.g. *y* or *y2*), `ay` is  specified in the same terms as that axis. This is useful  for trendline annotations which should continue to indicate  the correct trend when zoomed.
       * @default: "pixel"
       * Plotly @type: enumerated
       */
      ayref?: "pixel"|"/^y([2-9]|[1-9][0-9]+)?$/"|string,
      /**
       * Sets the annotation's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where 0 (1) corresponds to the left (right) side.
       * Plotly @type: enumerated
       */
      xref?: "paper"|"/^x([2-9]|[1-9][0-9]+)?$/"|string,
      /**
       * Sets the annotation's x position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      x?: any,
      /**
       * Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
       * @default: "auto"
       * Plotly @type: enumerated
       */
      xanchor?: "auto"|"left"|"center"|"right",
      /**
       * Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.
       * @default: "0"
       * Plotly @type: number
       */
      xshift?: number,
      /**
       * Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where 0 (1) corresponds to the bottom (top).
       * Plotly @type: enumerated
       */
      yref?: "paper"|"/^y([2-9]|[1-9][0-9]+)?$/"|string,
      /**
       * Sets the annotation's y position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      y?: any,
      /**
       * Sets the text box's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
       * @default: "auto"
       * Plotly @type: enumerated
       */
      yanchor?: "auto"|"top"|"middle"|"bottom",
      /**
       * Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.
       * @default: "0"
       * Plotly @type: number
       */
      yshift?: number,
      /**
       * Makes this annotation respond to clicks on the plot. If you click a data point that exactly matches the `x` and `y` values of this annotation, and it is hidden (visible: false), it will appear. In *onoff* mode, you must click the same point again to make it disappear, so if you click multiple points, you can show multiple annotations. In *onout* mode, a click anywhere else in the plot (on another data point or not) will hide this annotation. If you need to show/hide this annotation in response to different `x` or `y` values, you can set `xclick` and/or `yclick`. This is useful for example to label the side of a bar. To label markers though, `standoff` is preferred over `xclick` and `yclick`.
       * @default: "false"
       * Plotly @type: enumerated
       */
      clicktoshow?: false|"onoff"|"onout",
      /**
       * Toggle this annotation when clicking a data point whose `x` value is `xclick` rather than the annotation's `x` value.
       * Plotly @type: any
       */
      xclick?: any,
      /**
       * Toggle this annotation when clicking a data point whose `y` value is `yclick` rather than the annotation's `y` value.
       * Plotly @type: any
       */
      yclick?: any,
      /**
       * Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.
       * Plotly @type: string
       */
      hovertext?: string,
      hoverlabel?: {
        /**
         * Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.
         */
        font?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
      },
      /**
       * Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is *false* unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.
       * Plotly @type: boolean
       */
      captureevents?: boolean,
      /**
       * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
       * Plotly @type: string
       */
      name?: string,
      /**
       * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
       * Plotly @type: string
       */
      templateitemname?: string,
    }[];
    shapes?: {
      /**
       * Determines whether or not this shape is visible.
       * @default: "true"
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) with respect to the axes' sizing mode. If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) with respect to the axes' sizing mode. If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) with respect to the axes' sizing mode. If *path*, draw a custom SVG path using `path`. with respect to the axes' sizing mode.
       * Plotly @type: enumerated
       */
      type?: "circle"|"rect"|"path"|"line",
      /**
       * Specifies whether shapes are drawn below or above traces.
       * @default: "above"
       * Plotly @type: enumerated
       */
      layer?: "below"|"above",
      /**
       * Sets the shape's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate. If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right) side. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, then you must convert the date to unix time in milliseconds.
       * Plotly @type: enumerated
       */
      xref?: "paper"|"/^x([2-9]|[1-9][0-9]+)?$/"|string,
      /**
       * Sets the shapes's sizing mode along the x axis. If set to *scaled*, `x0`, `x1` and x coordinates within `path` refer to data values on the x axis or a fraction of the plot area's width (`xref` set to *paper*). If set to *pixel*, `xanchor` specifies the x position in terms of data or plot fraction but `x0`, `x1` and x coordinates within `path` are pixels relative to `xanchor`. This way, the shape can have a fixed width while maintaining a position relative to data or plot fraction.
       * @default: "scaled"
       * Plotly @type: enumerated
       */
      xsizemode?: "scaled"|"pixel",
      /**
       * Only relevant in conjunction with `xsizemode` set to *pixel*. Specifies the anchor point on the x axis to which `x0`, `x1` and x coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `xsizemode` not set to *pixel*.
       * Plotly @type: any
       */
      xanchor?: any,
      /**
       * Sets the shape's starting x position. See `type` and `xsizemode` for more info.
       * Plotly @type: any
       */
      x0?: any,
      /**
       * Sets the shape's end x position. See `type` and `xsizemode` for more info.
       * Plotly @type: any
       */
      x1?: any,
      /**
       * Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top).
       * Plotly @type: enumerated
       */
      yref?: "paper"|"/^y([2-9]|[1-9][0-9]+)?$/"|string,
      /**
       * Sets the shapes's sizing mode along the y axis. If set to *scaled*, `y0`, `y1` and y coordinates within `path` refer to data values on the y axis or a fraction of the plot area's height (`yref` set to *paper*). If set to *pixel*, `yanchor` specifies the y position in terms of data or plot fraction but `y0`, `y1` and y coordinates within `path` are pixels relative to `yanchor`. This way, the shape can have a fixed height while maintaining a position relative to data or plot fraction.
       * @default: "scaled"
       * Plotly @type: enumerated
       */
      ysizemode?: "scaled"|"pixel",
      /**
       * Only relevant in conjunction with `ysizemode` set to *pixel*. Specifies the anchor point on the y axis to which `y0`, `y1` and y coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `ysizemode` not set to *pixel*.
       * Plotly @type: any
       */
      yanchor?: any,
      /**
       * Sets the shape's starting y position. See `type` and `ysizemode` for more info.
       * Plotly @type: any
       */
      y0?: any,
      /**
       * Sets the shape's end y position. See `type` and `ysizemode` for more info.
       * Plotly @type: any
       */
      y1?: any,
      /**
       * For `type` *path* - a valid SVG path with the pixel values replaced by data values in `xsizemode`/`ysizemode` being *scaled* and taken unmodified as pixels relative to `xanchor` and `yanchor` in case of *pixel* size mode. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained "polybezier" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789
       * Plotly @type: string
       */
      path?: string,
      /**
       * Sets the opacity of the shape.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number,
      line?: {
        /**
         * Sets the line color.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the line width (in px).
         * @default: "2"
         * Plotly @type: number
         */
        width?: number,
        /**
         * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
         * @default: "solid"
         * Plotly @type: string
         */
        dash?: string,
      },
      /**
       * Sets the color filling the shape's interior.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      fillcolor?: string,
      /**
       * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
       * Plotly @type: string
       */
      name?: string,
      /**
       * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
       * Plotly @type: string
       */
      templateitemname?: string,
    }[];
    images?: {
      /**
       * Determines whether or not this image is visible.
       * @default: "true"
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Specifies the URL of the image to be used. The URL must be accessible from the domain where the plot code is run, and can be either relative or absolute.
       * Plotly @type: string
       */
      source?: string,
      /**
       * Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area.
       * @default: "above"
       * Plotly @type: enumerated
       */
      layer?: "below"|"above",
      /**
       * Sets the image container size horizontally. The image will be sized based on the `position` value. When `xref` is set to `paper`, units are sized relative to the plot width.
       * @default: "0"
       * Plotly @type: number
       */
      sizex?: number,
      /**
       * Sets the image container size vertically. The image will be sized based on the `position` value. When `yref` is set to `paper`, units are sized relative to the plot height.
       * @default: "0"
       * Plotly @type: number
       */
      sizey?: number,
      /**
       * Specifies which dimension of the image to constrain.
       * @default: "contain"
       * Plotly @type: enumerated
       */
      sizing?: "fill"|"contain"|"stretch",
      /**
       * Sets the opacity of the image.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number,
      /**
       * Sets the image's x position. When `xref` is set to `paper`, units are sized relative to the plot height. See `xref` for more info
       * @default: "0"
       * Plotly @type: any
       */
      x?: any,
      /**
       * Sets the image's y position. When `yref` is set to `paper`, units are sized relative to the plot height. See `yref` for more info
       * @default: "0"
       * Plotly @type: any
       */
      y?: any,
      /**
       * Sets the anchor for the x position
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the anchor for the y position.
       * @default: "top"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the images's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to an x data coordinate If set to *paper*, the `x` position refers to the distance from the left of plot in normalized coordinates where *0* (*1*) corresponds to the left (right).
       * @default: "paper"
       * Plotly @type: enumerated
       */
      xref?: "paper"|"/^x([2-9]|[1-9][0-9]+)?$/"|string,
      /**
       * Sets the images's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y data coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plot in normalized coordinates where *0* (*1*) corresponds to the bottom (top).
       * @default: "paper"
       * Plotly @type: enumerated
       */
      yref?: "paper"|"/^y([2-9]|[1-9][0-9]+)?$/"|string,
      /**
       * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
       * Plotly @type: string
       */
      name?: string,
      /**
       * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
       * Plotly @type: string
       */
      templateitemname?: string,
    }[];
    updatemenus?: {
      /**
       * Determines whether or not the update menu is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically
       * @default: "dropdown"
       * Plotly @type: enumerated
       */
      type?: "dropdown"|"buttons",
      /**
       * Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.
       * @default: "down"
       * Plotly @type: enumerated
       */
      direction?: "left"|"right"|"up"|"down",
      /**
       * Determines which button (by index starting from 0) is considered active.
       * @default: "0"
       * Plotly @type: integer
       */
      active?: number,
      /**
       * Highlights active dropdown item or active button if true.
       * @default: "true"
       * Plotly @type: boolean
       */
      showactive?: boolean,
      buttons?: {
        /**
         * Determines whether or not this button is visible.
         * Plotly @type: boolean
         */
        visible?: boolean,
        /**
         * Sets the Plotly method to be called on click. If the `skip` method is used, the API updatemenu will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to updatemenu events manually via JavaScript.
         * @default: "restyle"
         * Plotly @type: enumerated
         */
        method?: "restyle"|"relayout"|"animate"|"update"|"skip",
        /**
         * Sets the arguments values to be passed to the Plotly method set in `method` on click.
         * Plotly @type: info_array ([[valType:any, editType:arraydraw], [valType:any, editType:arraydraw], [valType:any, editType:arraydraw]])
         */
        args?: [any, any, any],
        /**
         * Sets the text label to appear on the button.
         * Plotly @type: string
         */
        label?: string,
        /**
         * When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_buttonclicked` method and executing the API command manually without losing the benefit of the updatemenu automatically binding to the state of the plot through the specification of `method` and `args`.
         * @default: "true"
         * Plotly @type: boolean
         */
        execute?: boolean,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets the x position (in normalized coordinates) of the update menu.
       * @default: "-0.05"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
       * @default: "right"
       * Plotly @type: enumerated
       */
      xanchor?: "auto"|"left"|"center"|"right",
      /**
       * Sets the y position (in normalized coordinates) of the update menu.
       * @default: "1"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets the update menu's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
       * @default: "top"
       * Plotly @type: enumerated
       */
      yanchor?: "auto"|"top"|"middle"|"bottom",
      /**
       * Sets the padding around the buttons or dropdown menu.
       */
      pad?: {
        /**
         * The amount of padding (in px) along the top of the component.
         * @default: "0"
         * Plotly @type: number
         */
        t?: number,
        /**
         * The amount of padding (in px) on the right side of the component.
         * @default: "0"
         * Plotly @type: number
         */
        r?: number,
        /**
         * The amount of padding (in px) along the bottom of the component.
         * @default: "0"
         * Plotly @type: number
         */
        b?: number,
        /**
         * The amount of padding (in px) on the left side of the component.
         * @default: "0"
         * Plotly @type: number
         */
        l?: number,
      },
      /**
       * Sets the font of the update menu button text.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the background color of the update menu buttons.
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the color of the border enclosing the update menu.
       * @default: "#BEC8D9"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) of the border enclosing the update menu.
       * @default: "1"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
       * Plotly @type: string
       */
      name?: string,
      /**
       * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
       * Plotly @type: string
       */
      templateitemname?: string,
    }[];
    sliders?: {
      /**
       * Determines whether or not the slider is visible.
       * @default: "true"
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines which button (by index starting from 0) is considered active.
       * @default: "0"
       * Plotly @type: number
       */
      active?: number,
      steps?: {
        /**
         * Determines whether or not this step is included in the slider.
         * @default: "true"
         * Plotly @type: boolean
         */
        visible?: boolean,
        /**
         * Sets the Plotly method to be called when the slider value is changed. If the `skip` method is used, the API slider will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to slider events manually via JavaScript.
         * @default: "restyle"
         * Plotly @type: enumerated
         */
        method?: "restyle"|"relayout"|"animate"|"update"|"skip",
        /**
         * Sets the arguments values to be passed to the Plotly method set in `method` on slide.
         * Plotly @type: info_array ([[valType:any, editType:arraydraw], [valType:any, editType:arraydraw], [valType:any, editType:arraydraw]])
         */
        args?: [any, any, any],
        /**
         * Sets the text label to appear on the slider
         * Plotly @type: string
         */
        label?: string,
        /**
         * Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided.
         * Plotly @type: string
         */
        value?: string,
        /**
         * When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_sliderchange` method and executing the API command manually without losing the benefit of the slider automatically binding to the state of the plot through the specification of `method` and `args`.
         * @default: "true"
         * Plotly @type: boolean
         */
        execute?: boolean,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Determines whether this slider length is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the slider This measure excludes the padding of both ends. That is, the slider's length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position (in normalized coordinates) of the slider.
       * @default: "0"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Set the padding of the slider component along each side.
       */
      pad?: {
        /**
         * The amount of padding (in px) along the top of the component.
         * @default: "20"
         * Plotly @type: number
         */
        t?: number,
        /**
         * The amount of padding (in px) on the right side of the component.
         * @default: "0"
         * Plotly @type: number
         */
        r?: number,
        /**
         * The amount of padding (in px) along the bottom of the component.
         * @default: "0"
         * Plotly @type: number
         */
        b?: number,
        /**
         * The amount of padding (in px) on the left side of the component.
         * @default: "0"
         * Plotly @type: number
         */
        l?: number,
      },
      /**
       * Sets the slider's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "auto"|"left"|"center"|"right",
      /**
       * Sets the y position (in normalized coordinates) of the slider.
       * @default: "0"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets the slider's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
       * @default: "top"
       * Plotly @type: enumerated
       */
      yanchor?: "auto"|"top"|"middle"|"bottom",
      transition?: {
        /**
         * Sets the duration of the slider transition
         * @default: "150"
         * Plotly @type: number
         */
        duration?: number,
        /**
         * Sets the easing function of the slider transition
         * @default: "cubic-in-out"
         * Plotly @type: enumerated
         */
        easing?: "linear"|"quad"|"cubic"|"sin"|"exp"|"circle"|"elastic"|"back"|"bounce"|"linear-in"|"quad-in"|"cubic-in"|"sin-in"|"exp-in"|"circle-in"|"elastic-in"|"back-in"|"bounce-in"|"linear-out"|"quad-out"|"cubic-out"|"sin-out"|"exp-out"|"circle-out"|"elastic-out"|"back-out"|"bounce-out"|"linear-in-out"|"quad-in-out"|"cubic-in-out"|"sin-in-out"|"exp-in-out"|"circle-in-out"|"elastic-in-out"|"back-in-out"|"bounce-in-out",
      },
      currentvalue?: {
        /**
         * Shows the currently-selected value above the slider.
         * @default: "true"
         * Plotly @type: boolean
         */
        visible?: boolean,
        /**
         * The alignment of the value readout relative to the length of the slider.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * The amount of space, in pixels, between the current value label and the slider.
         * @default: "10"
         * Plotly @type: number
         */
        offset?: number,
        /**
         * When currentvalue.visible is true, this sets the prefix of the label.
         * Plotly @type: string
         */
        prefix?: string,
        /**
         * When currentvalue.visible is true, this sets the suffix of the label.
         * Plotly @type: string
         */
        suffix?: string,
        /**
         * Sets the font of the current value label text.
         */
        font?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
      },
      /**
       * Sets the font of the slider step labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the background color of the slider grip while dragging.
       * @default: "#dbdde0"
       * Plotly @type: color
       */
      activebgcolor?: string,
      /**
       * Sets the background color of the slider.
       * @default: "#f8fafc"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the color of the border enclosing the slider.
       * @default: "#bec8d9"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) of the border enclosing the slider.
       * @default: "1"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the length in pixels of step tick marks
       * @default: "7"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the color of the border enclosing the slider.
       * @default: "#333"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the length in pixels of minor step tick marks
       * @default: "4"
       * Plotly @type: number
       */
      minorticklen?: number,
      /**
       * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
       * Plotly @type: string
       */
      name?: string,
      /**
       * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
       * Plotly @type: string
       */
      templateitemname?: string,
    }[];
    /**
     * Sets the gap (in plot fraction) between bars of adjacent location coordinates.
     * Plotly @type: number
     */
    bargap?: number;

  }
}

declare module plotly.traces {
  interface BaseTrace {
    type?: 'scattergl'|'area'|'bar'|'box'|'candlestick'|'choropleth'|'cone'|'contour'|'heatmap'|'heatmapgl'|'histogram'|'histogram2d'|'histogram2dcontour'|'mesh3d'|'ohlc'|'pie'|'pointcloud'|'scatter'|'scatter3d'|'scattergeo'|'scattermapbox'|'scatterternary'|'surface'|'sankey'|'scattercarpet'|'carpet'|'contourcarpet'|'parcoords'|'table'|'scatterpolar'|'scatterpolargl'|'violin'|'splom'|'streamtube'|'barpolar';
  }

  /**
   * scatter: The scatter trace type encompasses line charts, scatter charts, text charts, and bubble charts. The data visualized as scatter point or lines is set in `x` and `y`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays.
   */
  export interface Scatter extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
     * @default: "0"
     * Plotly @type: any
     */
    x0?: any;
    /**
     * Sets the x coordinate step. See `x0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dx?: number;
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
     * @default: "0"
     * Plotly @type: any
     */
    y0?: any;
    /**
     * Sets the y coordinate step. See `y0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dy?: number;
    /**
     * Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is *h*). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using *tonexty* (*tonextx*) if `orientation` is *h* (*v*) and sets the default `mode` to *lines* irrespective of point count. You can only stack on a numeric (linear or log) axis.
     * Plotly @type: string
     */
    stackgroup?: string;
    /**
     * Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the stacking direction. With *v* (*h*), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.
     * Plotly @type: enumerated
     */
    orientation?: "v"|"h";
    /**
     * Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With *fraction*, the value of each trace at each location is divided by the sum of all trace values at that location. *percent* is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.
     * Plotly @type: enumerated
     */
    groupnorm?: ""|"fraction"|"percent";
    /**
     * Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With *infer zero* we insert a zero at these locations. With *interpolate* we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.
     * @default: "infer zero"
     * Plotly @type: enumerated
     */
    stackgaps?: "infer zero"|"interpolate";
    /**
     * Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    /**
     * Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    /**
     * Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
     * Plotly @type: flaglist
     */
    hoveron?: "points"|"fills";
    line?: {
      /**
       * Sets the line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
       * @default: "linear"
       * Plotly @type: enumerated
       */
      shape?: "linear"|"spline"|"hv"|"vh"|"hvh"|"vhv",
      /**
       * Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
      /**
       * Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.
       * @default: "true"
       * Plotly @type: boolean
       */
      simplify?: boolean,
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    /**
     * Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
     * @default: "true"
     * Plotly @type: boolean
     */
    cliponaxis?: boolean;
    /**
     * Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
     * Plotly @type: enumerated
     */
    fill?: "none"|"tozeroy"|"tozerox"|"tonexty"|"tonextx"|"toself"|"tonext";
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    marker?: {
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
       * @default: "0"
       * Plotly @type: number
       */
      maxdisplayed?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      gradient?: {
        /**
         * Sets the type of gradient used to fill the markers
         * @default: "none"
         * Plotly @type: enumerated
         */
        type?: "radial"|"horizontal"|"vertical"|"none"|string|string[],
        /**
         * Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  type .
         * Plotly @type: string
         */
        typesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "middle center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right"|string|string[];
    /**
     * Sets the text font.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the radial coordinates.
     * Plotly @type: data_array
     */
    r?: any[];
    /**
     * For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the angular coordinates.
     * Plotly @type: data_array
     */
    t?: any[];
    error_x?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Plotly @type: boolean
       */
      copy_ystyle?: boolean,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    error_y?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;
    /**
     * Sets the source reference on plot.ly for  r .
     * Plotly @type: string
     */
    rsrc?: string;
    /**
     * Sets the source reference on plot.ly for  t .
     * Plotly @type: string
     */
    tsrc?: string;

  }
  /**
   * bar: The data visualized by the span of the bars is set in `y` if `orientation` is set th *v* (the default) and the labels are set in `x`. By setting `orientation` to *h*, the roles are interchanged.
   */
  export interface Bar extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
     * @default: "0"
     * Plotly @type: any
     */
    x0?: any;
    /**
     * Sets the x coordinate step. See `x0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dx?: number;
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
     * @default: "0"
     * Plotly @type: any
     */
    y0?: any;
    /**
     * Sets the y coordinate step. See `y0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dy?: number;
    /**
     * Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    /**
     * Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed). *auto* positions `text` inside or outside so that `text` size is maximized.
     * @default: "none"
     * Plotly @type: enumerated
     */
    textposition?: "inside"|"outside"|"auto"|"none"|string|string[];
    /**
     * Sets the font used for `text`.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the font used for `text` lying inside the bar.
     */
    insidetextfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the font used for `text` lying outside the bar.
     */
    outsidetextfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Constrain the size of text inside or outside a bar to be no larger than the bar itself.
     * @default: "both"
     * Plotly @type: enumerated
     */
    constraintext?: "inside"|"outside"|"both"|"none";
    /**
     * Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
     * @default: "true"
     * Plotly @type: boolean
     */
    cliponaxis?: boolean;
    /**
     * Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).
     * Plotly @type: enumerated
     */
    orientation?: "v"|"h";
    /**
     * Sets where the bar base is drawn (in position axis units). In *stack* or *relative* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.
     * Plotly @type: any
     */
    base?: any;
    /**
     * Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.
     * Plotly @type: number
     */
    offset?: number|number[];
    /**
     * Sets the bar width (in position axis units).
     * Plotly @type: number
     */
    width?: number|number[];
    marker?: {
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * @default: "0"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      /**
       * Sets the opacity of the bars.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
    };
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    /**
     * For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the radial coordinates.
     * Plotly @type: data_array
     */
    r?: any[];
    /**
     * For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the angular coordinates.
     * Plotly @type: data_array
     */
    t?: any[];
    error_x?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Plotly @type: boolean
       */
      copy_ystyle?: boolean,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    error_y?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;
    /**
     * Sets the source reference on plot.ly for  base .
     * Plotly @type: string
     */
    basesrc?: string;
    /**
     * Sets the source reference on plot.ly for  offset .
     * Plotly @type: string
     */
    offsetsrc?: string;
    /**
     * Sets the source reference on plot.ly for  width .
     * Plotly @type: string
     */
    widthsrc?: string;
    /**
     * Sets the source reference on plot.ly for  r .
     * Plotly @type: string
     */
    rsrc?: string;
    /**
     * Sets the source reference on plot.ly for  t .
     * Plotly @type: string
     */
    tsrc?: string;

  }
  /**
   * box: In vertical (horizontal) box plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one box per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single box is drawn. That box position is then positioned with with `name` or with `x0` (`y0`) if provided. Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2) is marked by a line inside the box. By default, the whiskers correspond to the box' edges +/- 1.5 times the interquartile range (IQR = Q3-Q1), see *boxpoints* for other options.
   */
  export interface Box extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the y sample data or coordinates. See overview for more info.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the x sample data or coordinates. See overview for more info.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the x coordinate of the box. See overview for more info.
     * Plotly @type: any
     */
    x0?: any;
    /**
     * Sets the y coordinate of the box. See overview for more info.
     * Plotly @type: any
     */
    y0?: any;
    /**
     * Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).
     * @default: "0.5"
     * Plotly @type: number
     */
    whiskerwidth?: number;
    /**
     * Determines whether or not notches should be drawn.
     * Plotly @type: boolean
     */
    notched?: boolean;
    /**
     * Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).
     * @default: "0.25"
     * Plotly @type: number
     */
    notchwidth?: number;
    /**
     * If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points
     * @default: "outliers"
     * Plotly @type: enumerated
     */
    boxpoints?: "all"|"outliers"|"suspectedoutliers"|false;
    /**
     * If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn.
     * @default: "false"
     * Plotly @type: enumerated
     */
    boxmean?: true|"sd"|false;
    /**
     * Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es).
     * Plotly @type: number
     */
    jitter?: number;
    /**
     * Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes
     * Plotly @type: number
     */
    pointpos?: number;
    /**
     * Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal).
     * Plotly @type: enumerated
     */
    orientation?: "v"|"h";
    marker?: {
      /**
       * Sets the color of the outlier sample points.
       * @default: "rgba(0, 0, 0, 0)"
       * Plotly @type: color
       */
      outliercolor?: string,
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open",
      /**
       * Sets the marker opacity.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number,
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number,
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string,
      line?: {
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * @default: "0"
         * Plotly @type: number
         */
        width?: number,
        /**
         * Sets the border line color of the outlier sample points. Defaults to marker.color
         * Plotly @type: color
         */
        outliercolor?: string,
        /**
         * Sets the border line width (in px) of the outlier sample points.
         * @default: "1"
         * Plotly @type: number
         */
        outlierwidth?: number,
      },
    };
    line?: {
      /**
       * Sets the color of line bounding the box(es).
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the width (in px) of line bounding the box(es).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
    };
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
    };
    /**
     * Do the hover effects highlight individual boxes  or sample points or both?
     * @default: "boxes+points"
     * Plotly @type: flaglist
     */
    hoveron?: "boxes"|"points";
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * heatmap: The data that describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements. If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets.
   */
  export interface Heatmap extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the z data.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
     * @default: "0"
     * Plotly @type: any
     */
    x0?: any;
    /**
     * Sets the x coordinate step. See `x0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dx?: number;
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
     * @default: "0"
     * Plotly @type: any
     */
    y0?: any;
    /**
     * Sets the y coordinate step. See `y0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dy?: number;
    /**
     * Sets the text elements associated with each z value.
     * Plotly @type: data_array
     */
    text?: any[];
    /**
     * Transposes the z data.
     * @default: "false"
     * Plotly @type: boolean
     */
    transpose?: boolean;
    /**
     * If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
     * Plotly @type: enumerated
     */
    xtype?: "array"|"scaled";
    /**
     * If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
     * Plotly @type: enumerated
     */
    ytype?: "array"|"scaled";
    /**
     * Picks a smoothing algorithm use to smooth `z` data.
     * @default: "false"
     * Plotly @type: enumerated
     */
    zsmooth?: "fast"|"best"|false;
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    /**
     * Sets the horizontal gap (in pixels) between bricks.
     * @default: "0"
     * Plotly @type: number
     */
    xgap?: number;
    /**
     * Sets the vertical gap (in pixels) between bricks.
     * @default: "0"
     * Plotly @type: number
     */
    ygap?: number;
    /**
     * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-format/blob/master/README.md#locale_format
     * Plotly @type: string
     */
    zhoverformat?: string;
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    zauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
     * Plotly @type: number
     */
    zmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
     * Plotly @type: number
     */
    zmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "false"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * histogram: The sample data from which statistics are computed is set in `x` for vertically spanning histograms and in `y` for horizontally spanning histograms. Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided.
   */
  export interface Histogram extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the sample data to be binned on the x axis.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the sample data to be binned on the y axis.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).
     * Plotly @type: enumerated
     */
    orientation?: "v"|"h";
    /**
     * Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.
     * @default: "count"
     * Plotly @type: enumerated
     */
    histfunc?: "count"|"sum"|"avg"|"min"|"max";
    /**
     * Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).
     * Plotly @type: enumerated
     */
    histnorm?: ""|"percent"|"probability"|"density"|"probability density";
    cumulative?: {
      /**
       * If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the *density* `histnorm` settings behave the same as their equivalents without *density*: ** and *density* both rise to the number of data points, and *probability* and *probability density* both rise to the number of sample points.
       * @default: "false"
       * Plotly @type: boolean
       */
      enabled?: boolean,
      /**
       * Only applies if cumulative is enabled. If *increasing* (default) we sum all prior bins, so the result increases from left to right. If *decreasing* we sum later bins so the result decreases from left to right.
       * @default: "increasing"
       * Plotly @type: enumerated
       */
      direction?: "increasing"|"decreasing",
      /**
       * Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. *include* is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. *exclude* makes the opposite half-bin bias, and *half* removes it.
       * @default: "include"
       * Plotly @type: enumerated
       */
      currentbin?: "include"|"exclude"|"half",
    };
    /**
     * Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.
     * Plotly @type: boolean
     */
    autobinx?: boolean;
    /**
     * Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.
     * @default: "0"
     * Plotly @type: integer
     */
    nbinsx?: number;
    xbins?: {
      /**
       * Sets the starting value for the x axis bins.
       * Plotly @type: any
       */
      start?: any,
      /**
       * Sets the end value for the x axis bins.
       * Plotly @type: any
       */
      end?: any,
      /**
       * Sets the step in-between value each x axis bin.
       * Plotly @type: any
       */
      size?: any,
      impliedEdits?: {
      },
    };
    /**
     * Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.
     * Plotly @type: boolean
     */
    autobiny?: boolean;
    /**
     * Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.
     * @default: "0"
     * Plotly @type: integer
     */
    nbinsy?: number;
    ybins?: {
      /**
       * Sets the starting value for the y axis bins.
       * Plotly @type: any
       */
      start?: any,
      /**
       * Sets the end value for the y axis bins.
       * Plotly @type: any
       */
      end?: any,
      /**
       * Sets the step in-between value each y axis bin.
       * Plotly @type: any
       */
      size?: any,
      impliedEdits?: {
      },
    };
    marker?: {
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * @default: "0"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      /**
       * Sets the opacity of the bars.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
    };
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    error_x?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Plotly @type: boolean
       */
      copy_ystyle?: boolean,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    error_y?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * histogram2d: The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a heatmap.
   */
  export interface Histogram2D extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the sample data to be binned on the x axis.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the sample data to be binned on the y axis.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the aggregation data.
     * Plotly @type: data_array
     */
    z?: any[];
    marker?: {
      /**
       * Sets the aggregation data.
       * Plotly @type: data_array
       */
      color?: any[],
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).
     * Plotly @type: enumerated
     */
    histnorm?: ""|"percent"|"probability"|"density"|"probability density";
    /**
     * Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.
     * @default: "count"
     * Plotly @type: enumerated
     */
    histfunc?: "count"|"sum"|"avg"|"min"|"max";
    /**
     * Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.
     * Plotly @type: boolean
     */
    autobinx?: boolean;
    /**
     * Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.
     * @default: "0"
     * Plotly @type: integer
     */
    nbinsx?: number;
    xbins?: {
      /**
       * Sets the starting value for the x axis bins.
       * Plotly @type: any
       */
      start?: any,
      /**
       * Sets the end value for the x axis bins.
       * Plotly @type: any
       */
      end?: any,
      /**
       * Sets the step in-between value each x axis bin.
       * Plotly @type: any
       */
      size?: any,
      impliedEdits?: {
      },
    };
    /**
     * Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.
     * Plotly @type: boolean
     */
    autobiny?: boolean;
    /**
     * Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.
     * @default: "0"
     * Plotly @type: integer
     */
    nbinsy?: number;
    ybins?: {
      /**
       * Sets the starting value for the y axis bins.
       * Plotly @type: any
       */
      start?: any,
      /**
       * Sets the end value for the y axis bins.
       * Plotly @type: any
       */
      end?: any,
      /**
       * Sets the step in-between value each y axis bin.
       * Plotly @type: any
       */
      size?: any,
      impliedEdits?: {
      },
    };
    /**
     * Sets the horizontal gap (in pixels) between bricks.
     * @default: "0"
     * Plotly @type: number
     */
    xgap?: number;
    /**
     * Sets the vertical gap (in pixels) between bricks.
     * @default: "0"
     * Plotly @type: number
     */
    ygap?: number;
    /**
     * Picks a smoothing algorithm use to smooth `z` data.
     * @default: "false"
     * Plotly @type: enumerated
     */
    zsmooth?: "fast"|"best"|false;
    /**
     * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-format/blob/master/README.md#locale_format
     * Plotly @type: string
     */
    zhoverformat?: string;
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    zauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
     * Plotly @type: number
     */
    zmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
     * Plotly @type: number
     */
    zmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "false"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;

  }
  /**
   * histogram2dcontour: The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot.
   */
  export interface Histogram2DContour extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the sample data to be binned on the x axis.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the sample data to be binned on the y axis.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the aggregation data.
     * Plotly @type: data_array
     */
    z?: any[];
    marker?: {
      /**
       * Sets the aggregation data.
       * Plotly @type: data_array
       */
      color?: any[],
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).
     * Plotly @type: enumerated
     */
    histnorm?: ""|"percent"|"probability"|"density"|"probability density";
    /**
     * Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.
     * @default: "count"
     * Plotly @type: enumerated
     */
    histfunc?: "count"|"sum"|"avg"|"min"|"max";
    /**
     * Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.
     * Plotly @type: boolean
     */
    autobinx?: boolean;
    /**
     * Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.
     * @default: "0"
     * Plotly @type: integer
     */
    nbinsx?: number;
    xbins?: {
      /**
       * Sets the starting value for the x axis bins.
       * Plotly @type: any
       */
      start?: any,
      /**
       * Sets the end value for the x axis bins.
       * Plotly @type: any
       */
      end?: any,
      /**
       * Sets the step in-between value each x axis bin.
       * Plotly @type: any
       */
      size?: any,
      impliedEdits?: {
      },
    };
    /**
     * Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.
     * Plotly @type: boolean
     */
    autobiny?: boolean;
    /**
     * Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.
     * @default: "0"
     * Plotly @type: integer
     */
    nbinsy?: number;
    ybins?: {
      /**
       * Sets the starting value for the y axis bins.
       * Plotly @type: any
       */
      start?: any,
      /**
       * Sets the end value for the y axis bins.
       * Plotly @type: any
       */
      end?: any,
      /**
       * Sets the step in-between value each y axis bin.
       * Plotly @type: any
       */
      size?: any,
      impliedEdits?: {
      },
    };
    /**
     * Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
     * @default: "true"
     * Plotly @type: boolean
     */
    autocontour?: boolean;
    /**
     * Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
     * @default: "15"
     * Plotly @type: integer
     */
    ncontours?: number;
    contours?: {
      /**
       * If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.
       * @default: "levels"
       * Plotly @type: enumerated
       */
      type?: "levels"|"constraint",
      /**
       * Sets the starting contour level value. Must be less than `contours.end`
       * Plotly @type: number
       */
      start?: number,
      /**
       * Sets the end contour level value. Must be more than `contours.start`
       * Plotly @type: number
       */
      end?: number,
      /**
       * Sets the step between each contour level. Must be positive.
       * Plotly @type: number
       */
      size?: number,
      /**
       * Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.
       * @default: "fill"
       * Plotly @type: enumerated
       */
      coloring?: "fill"|"heatmap"|"lines"|"none",
      /**
       * Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.
       * @default: "true"
       * Plotly @type: boolean
       */
      showlines?: boolean,
      /**
       * Determines whether to label the contour lines with their values.
       * @default: "false"
       * Plotly @type: boolean
       */
      showlabels?: boolean,
      /**
       * Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.
       */
      labelfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the contour label formatting rule using d3 formatting mini-language which is very similar to Python, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format.
       * Plotly @type: string
       */
      labelformat?: string,
      /**
       * Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.
       * @default: "="
       * Plotly @type: enumerated
       */
      operation?: "="|"<"|">="|">"|"<="|"[]"|"()"|"[)"|"(]"|"]["|")("|"]("|")[",
      /**
       * Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.
       * @default: "0"
       * Plotly @type: any
       */
      value?: any,
      impliedEdits?: {
      },
    };
    line?: {
      /**
       * Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
      /**
       * Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
    };
    /**
     * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-format/blob/master/README.md#locale_format
     * Plotly @type: string
     */
    zhoverformat?: string;
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    zauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
     * Plotly @type: number
     */
    zmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
     * Plotly @type: number
     */
    zmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "true"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;

  }
  /**
   * pie: A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors`
   */
  export interface Pic extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "label"|"text"|"value"|"percent"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.
     * Plotly @type: data_array
     */
    labels?: any[];
    /**
     * Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.
     * @default: "0"
     * Plotly @type: number
     */
    label0?: number;
    /**
     * Sets the label step. See `label0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dlabel?: number;
    /**
     * Sets the values of the sectors of this pie chart. If omitted, we count occurrences of each label.
     * Plotly @type: data_array
     */
    values?: any[];
    marker?: {
      /**
       * Sets the color of each sector of this pie chart. If not specified, the default trace color set is used to pick the sector colors.
       * Plotly @type: data_array
       */
      colors?: any[],
      line?: {
        /**
         * Sets the color of the line enclosing each sector.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the width (in px) of the line enclosing each sector.
         * @default: "0"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  colors .
       * Plotly @type: string
       */
      colorssrc?: string,
    };
    /**
     * Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: data_array
     */
    text?: any[];
    /**
     * Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    /**
     * If there are multiple pies that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.
     * Plotly @type: string
     */
    scalegroup?: string;
    /**
     * Determines which trace information appear on the graph.
     * Plotly @type: flaglist
     */
    textinfo?: "label"|"text"|"value"|"percent"|"none";
    /**
     * Specifies the location of the `textinfo`.
     * @default: "auto"
     * Plotly @type: enumerated
     */
    textposition?: "inside"|"outside"|"auto"|"none"|string|string[];
    /**
     * Sets the font used for `textinfo`.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets the font used for `textinfo` lying inside the pie.
     */
    insidetextfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets the font used for `textinfo` lying outside the pie.
     */
    outsidetextfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    domain?: {
      /**
       * Sets the horizontal domain of this pie trace (in plot fraction).
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:calc], [valType:number, min:0, max:1, editType:calc]])
       */
      x?: [number, number],
      /**
       * Sets the vertical domain of this pie trace (in plot fraction).
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:calc], [valType:number, min:0, max:1, editType:calc]])
       */
      y?: [number, number],
      /**
       * If there is a layout grid, use the domain for this row in the grid for this pie trace .
       * @default: "0"
       * Plotly @type: integer
       */
      row?: number,
      /**
       * If there is a layout grid, use the domain for this column in the grid for this pie trace .
       * @default: "0"
       * Plotly @type: integer
       */
      column?: number,
    };
    /**
     * Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.
     * @default: "0"
     * Plotly @type: number
     */
    hole?: number;
    /**
     * Determines whether or not the sectors are reordered from largest to smallest.
     * @default: "true"
     * Plotly @type: boolean
     */
    sort?: boolean;
    /**
     * Specifies the direction at which succeeding sectors follow one another.
     * @default: "counterclockwise"
     * Plotly @type: enumerated
     */
    direction?: "clockwise"|"counterclockwise";
    /**
     * Instead of the first slice starting at 12 o'clock, rotate to some other angle.
     * @default: "0"
     * Plotly @type: number
     */
    rotation?: number;
    /**
     * Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.
     * @default: "0"
     * Plotly @type: number
     */
    pull?: number|number[];
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  labels .
     * Plotly @type: string
     */
    labelssrc?: string;
    /**
     * Sets the source reference on plot.ly for  values .
     * Plotly @type: string
     */
    valuessrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;
    /**
     * Sets the source reference on plot.ly for  pull .
     * Plotly @type: string
     */
    pullsrc?: string;

  }
  /**
   * contour: The data from which contour lines are computed is set in `z`. Data in `z` must be a {2D array} of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to *true*, the above behavior is flipped.
   */
  export interface Contour extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the z data.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
     * @default: "0"
     * Plotly @type: any
     */
    x0?: any;
    /**
     * Sets the x coordinate step. See `x0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dx?: number;
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
     * @default: "0"
     * Plotly @type: any
     */
    y0?: any;
    /**
     * Sets the y coordinate step. See `y0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dy?: number;
    /**
     * Sets the text elements associated with each z value.
     * Plotly @type: data_array
     */
    text?: any[];
    /**
     * Transposes the z data.
     * @default: "false"
     * Plotly @type: boolean
     */
    transpose?: boolean;
    /**
     * If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
     * Plotly @type: enumerated
     */
    xtype?: "array"|"scaled";
    /**
     * If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
     * Plotly @type: enumerated
     */
    ytype?: "array"|"scaled";
    /**
     * Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-format/blob/master/README.md#locale_format
     * Plotly @type: string
     */
    zhoverformat?: string;
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    /**
     * Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    /**
     * Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
     * @default: "true"
     * Plotly @type: boolean
     */
    autocontour?: boolean;
    /**
     * Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
     * @default: "15"
     * Plotly @type: integer
     */
    ncontours?: number;
    contours?: {
      /**
       * If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.
       * @default: "levels"
       * Plotly @type: enumerated
       */
      type?: "levels"|"constraint",
      /**
       * Sets the starting contour level value. Must be less than `contours.end`
       * Plotly @type: number
       */
      start?: number,
      /**
       * Sets the end contour level value. Must be more than `contours.start`
       * Plotly @type: number
       */
      end?: number,
      /**
       * Sets the step between each contour level. Must be positive.
       * Plotly @type: number
       */
      size?: number,
      /**
       * Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.
       * @default: "fill"
       * Plotly @type: enumerated
       */
      coloring?: "fill"|"heatmap"|"lines"|"none",
      /**
       * Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.
       * @default: "true"
       * Plotly @type: boolean
       */
      showlines?: boolean,
      /**
       * Determines whether to label the contour lines with their values.
       * @default: "false"
       * Plotly @type: boolean
       */
      showlabels?: boolean,
      /**
       * Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.
       */
      labelfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the contour label formatting rule using d3 formatting mini-language which is very similar to Python, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format.
       * Plotly @type: string
       */
      labelformat?: string,
      /**
       * Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.
       * @default: "="
       * Plotly @type: enumerated
       */
      operation?: "="|"<"|">="|">"|"<="|"[]"|"()"|"[)"|"(]"|"]["|")("|"]("|")[",
      /**
       * Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.
       * @default: "0"
       * Plotly @type: any
       */
      value?: any,
      impliedEdits?: {
      },
    };
    line?: {
      /**
       * Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
      /**
       * Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
    };
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    zauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
     * Plotly @type: number
     */
    zmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
     * Plotly @type: number
     */
    zmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "false"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * scatterternary: Provides similar functionality to the *scatter* type but on a ternary phase diagram. The data is provided by at least two arrays out of `a`, `b`, `c` triplets.
   */
  export interface ScatterTernary extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "a"|"b"|"c"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.
     * Plotly @type: data_array
     */
    a?: any[];
    /**
     * Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.
     * Plotly @type: data_array
     */
    b?: any[];
    /**
     * Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.
     * Plotly @type: data_array
     */
    c?: any[];
    /**
     * The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum
     * @default: "0"
     * Plotly @type: number
     */
    sum?: number;
    /**
     * Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
     * @default: "markers"
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    /**
     * Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    line?: {
      /**
       * Sets the line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
      /**
       * Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
       * @default: "linear"
       * Plotly @type: enumerated
       */
      shape?: "linear"|"spline",
      /**
       * Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    /**
     * Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
     * @default: "true"
     * Plotly @type: boolean
     */
    cliponaxis?: boolean;
    /**
     * Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
     * @default: "none"
     * Plotly @type: enumerated
     */
    fill?: "none"|"toself"|"tonext";
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    marker?: {
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
       * @default: "0"
       * Plotly @type: number
       */
      maxdisplayed?: number,
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      gradient?: {
        /**
         * Sets the type of gradient used to fill the markers
         * @default: "none"
         * Plotly @type: enumerated
         */
        type?: "radial"|"horizontal"|"vertical"|"none"|string|string[],
        /**
         * Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  type .
         * Plotly @type: string
         */
        typesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the text font.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "middle center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right"|string|string[];
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    /**
     * Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
     * Plotly @type: flaglist
     */
    hoveron?: "points"|"fills";
    /**
     * Sets a reference between this trace's data coordinates and a ternary subplot. If *ternary* (the default value), the data refer to `layout.ternary`. If *ternary2*, the data refer to `layout.ternary2`, and so on.
     * @default: "ternary"
     * Plotly @type: subplotid
     */
    subplot?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  a .
     * Plotly @type: string
     */
    asrc?: string;
    /**
     * Sets the source reference on plot.ly for  b .
     * Plotly @type: string
     */
    bsrc?: string;
    /**
     * Sets the source reference on plot.ly for  c .
     * Plotly @type: string
     */
    csrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;

  }
  /**
   * violin: In vertical (horizontal) violin plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one violin per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single violin is drawn. That violin position is then positioned with with `name` or with `x0` (`y0`) if provided.
   */
  export interface Violin extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the y sample data or coordinates. See overview for more info.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the x sample data or coordinates. See overview for more info.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the x coordinate of the box. See overview for more info.
     * Plotly @type: any
     */
    x0?: any;
    /**
     * Sets the y coordinate of the box. See overview for more info.
     * Plotly @type: any
     */
    y0?: any;
    /**
     * Sets the orientation of the violin(s). If *v* (*h*), the distribution is visualized along the vertical (horizontal).
     * Plotly @type: enumerated
     */
    orientation?: "v"|"h";
    /**
     * Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.
     * Plotly @type: number
     */
    bandwidth?: number;
    /**
     * If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group.
     * Plotly @type: string
     */
    scalegroup?: string;
    /**
     * Sets the metric by which the width of each violin is determined.*width* means each violin has the same (max) width*count* means the violins are scaled by the number of sample points makingup each violin.
     * @default: "width"
     * Plotly @type: enumerated
     */
    scalemode?: "width"|"count";
    /**
     * Sets the method by which the span in data space where the density function will be computed. *soft* means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. *hard* means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode *manual* and fill in the `span` attribute.
     * @default: "soft"
     * Plotly @type: enumerated
     */
    spanmode?: "soft"|"hard"|"manual";
    /**
     * Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to *manual*.
     * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
     */
    span?: [any, any];
    line?: {
      /**
       * Sets the color of line bounding the violin(s).
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the width (in px) of line bounding the violin(s).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
    };
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    /**
     * If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the violins are shown with no sample points
     * @default: "outliers"
     * Plotly @type: enumerated
     */
    points?: "all"|"outliers"|"suspectedoutliers"|false;
    /**
     * Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the violins.
     * Plotly @type: number
     */
    jitter?: number;
    /**
     * Sets the position of the sample points in relation to the violins. If *0*, the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.
     * Plotly @type: number
     */
    pointpos?: number;
    marker?: {
      /**
       * Sets the color of the outlier sample points.
       * @default: "rgba(0, 0, 0, 0)"
       * Plotly @type: color
       */
      outliercolor?: string,
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open",
      /**
       * Sets the marker opacity.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number,
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number,
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string,
      line?: {
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * @default: "0"
         * Plotly @type: number
         */
        width?: number,
        /**
         * Sets the border line color of the outlier sample points. Defaults to marker.color
         * Plotly @type: color
         */
        outliercolor?: string,
        /**
         * Sets the border line width (in px) of the outlier sample points.
         * @default: "1"
         * Plotly @type: number
         */
        outlierwidth?: number,
      },
    };
    /**
     * Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    text?: string|string[];
    box?: {
      /**
       * Determines if an miniature box plot is drawn inside the violins.
       * @default: "false"
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.
       * @default: "0.25"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the inner box plot fill color.
       * Plotly @type: color
       */
      fillcolor?: string,
      line?: {
        /**
         * Sets the inner box plot bounding line color.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the inner box plot bounding line width.
         * Plotly @type: number
         */
        width?: number,
      },
    };
    meanline?: {
      /**
       * Determines if a line corresponding to the sample's mean is shown inside the violins. If `box.visible` is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.
       * @default: "false"
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Sets the mean line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the mean line width.
       * Plotly @type: number
       */
      width?: number,
    };
    /**
     * Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under *overlay* mode, where one trace has `side` set to *positive* and the other to *negative*.
     * @default: "both"
     * Plotly @type: enumerated
     */
    side?: "both"|"positive"|"negative";
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
    };
    /**
     * Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?
     * @default: "violins+points+kde"
     * Plotly @type: flaglist
     */
    hoveron?: "violins"|"points"|"kde"|"all";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * scatter3d: The data visualized as scatter point or lines in 3D dimension is set in `x`, `y`, `z`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` Projections are achieved via `projection`. Surface fills are achieved via `surfaceaxis`.
   */
  export interface Scatter3D extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the z coordinates.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    /**
     * Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
     * @default: "lines+markers"
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    /**
     * If *-1*, the scatter points are not fill with a surface If *0*, *1*, *2*, the scatter points are filled with a Delaunay surface about the x, y, z respectively.
     * @default: "-1"
     * Plotly @type: enumerated
     */
    surfaceaxis?: -1|0|1|2;
    /**
     * Sets the surface fill color.
     * Plotly @type: color
     */
    surfacecolor?: string;
    projection?: {
      x?: {
        /**
         * Sets whether or not projections are shown along the x axis.
         * @default: "false"
         * Plotly @type: boolean
         */
        show?: boolean,
        /**
         * Sets the projection color.
         * @default: "1"
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the scale factor determining the size of the projection marker points.
         * @default: "0.6666666666666666"
         * Plotly @type: number
         */
        scale?: number,
      },
      y?: {
        /**
         * Sets whether or not projections are shown along the y axis.
         * @default: "false"
         * Plotly @type: boolean
         */
        show?: boolean,
        /**
         * Sets the projection color.
         * @default: "1"
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the scale factor determining the size of the projection marker points.
         * @default: "0.6666666666666666"
         * Plotly @type: number
         */
        scale?: number,
      },
      z?: {
        /**
         * Sets whether or not projections are shown along the z axis.
         * @default: "false"
         * Plotly @type: boolean
         */
        show?: boolean,
        /**
         * Sets the projection color.
         * @default: "1"
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the scale factor determining the size of the projection marker points.
         * @default: "0.6666666666666666"
         * Plotly @type: number
         */
        scale?: number,
      },
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    line?: {
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of the lines.
       * @default: "solid"
       * Plotly @type: enumerated
       */
      dash?: "solid"|"dot"|"dash"|"longdash"|"dashdot"|"longdashdot",
      /**
       * Sets thelinecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax`  Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `line.color`is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    marker?: {
      /**
       * Sets the marker symbol type.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: "circle"|"circle-open"|"square"|"square-open"|"diamond"|"diamond-open"|"cross"|"x"|string|string[],
      /**
       * Sets the marker size (in px).
       * @default: "8"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      /**
       * Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set *marker.color* to an rgba color and use its alpha channel.
       * Plotly @type: number
       */
      opacity?: number,
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number,
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "top center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right";
    textfont?: {
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
    };
    error_x?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Plotly @type: boolean
       */
      copy_zstyle?: boolean,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    error_y?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Plotly @type: boolean
       */
      copy_zstyle?: boolean,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    error_z?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `z` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    zcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
     * @default: "scene"
     * Plotly @type: subplotid
     */
    scene?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;

  }
  /**
   * surface: The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a {2D array}. Coordinates in `x` and `y` can either be 1D {arrays} or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step. The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a {2D array}, where its bounds can be controlled using `cmin` and `cmax`.
   */
  export interface Surface extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the surface.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the z coordinates.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the text elements associated with each z value. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets the surface color values, used for setting a color scale independent of `z`.
     * Plotly @type: data_array
     */
    surfacecolor?: any[];
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    cauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.
     * Plotly @type: number
     */
    cmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.
     * Plotly @type: number
     */
    cmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "false"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    contours?: {
      x?: {
        /**
         * Determines whether or not contour lines about the x dimension are drawn.
         * @default: "false"
         * Plotly @type: boolean
         */
        show?: boolean,
        project?: {
          /**
           * Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          x?: boolean,
          /**
           * Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          y?: boolean,
          /**
           * Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          z?: boolean,
        },
        /**
         * Sets the color of the contour lines.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.
         * @default: "false"
         * Plotly @type: boolean
         */
        usecolormap?: boolean,
        /**
         * Sets the width of the contour lines.
         * @default: "2"
         * Plotly @type: number
         */
        width?: number,
        /**
         * Determines whether or not contour lines about the x dimension are highlighted on hover.
         * @default: "true"
         * Plotly @type: boolean
         */
        highlight?: boolean,
        /**
         * Sets the color of the highlighted contour lines.
         * @default: "#444"
         * Plotly @type: color
         */
        highlightcolor?: string,
        /**
         * Sets the width of the highlighted contour lines.
         * @default: "2"
         * Plotly @type: number
         */
        highlightwidth?: number,
      },
      y?: {
        /**
         * Determines whether or not contour lines about the y dimension are drawn.
         * @default: "false"
         * Plotly @type: boolean
         */
        show?: boolean,
        project?: {
          /**
           * Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          x?: boolean,
          /**
           * Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          y?: boolean,
          /**
           * Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          z?: boolean,
        },
        /**
         * Sets the color of the contour lines.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.
         * @default: "false"
         * Plotly @type: boolean
         */
        usecolormap?: boolean,
        /**
         * Sets the width of the contour lines.
         * @default: "2"
         * Plotly @type: number
         */
        width?: number,
        /**
         * Determines whether or not contour lines about the y dimension are highlighted on hover.
         * @default: "true"
         * Plotly @type: boolean
         */
        highlight?: boolean,
        /**
         * Sets the color of the highlighted contour lines.
         * @default: "#444"
         * Plotly @type: color
         */
        highlightcolor?: string,
        /**
         * Sets the width of the highlighted contour lines.
         * @default: "2"
         * Plotly @type: number
         */
        highlightwidth?: number,
      },
      z?: {
        /**
         * Determines whether or not contour lines about the z dimension are drawn.
         * @default: "false"
         * Plotly @type: boolean
         */
        show?: boolean,
        project?: {
          /**
           * Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          x?: boolean,
          /**
           * Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          y?: boolean,
          /**
           * Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
           * @default: "false"
           * Plotly @type: boolean
           */
          z?: boolean,
        },
        /**
         * Sets the color of the contour lines.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string,
        /**
         * An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.
         * @default: "false"
         * Plotly @type: boolean
         */
        usecolormap?: boolean,
        /**
         * Sets the width of the contour lines.
         * @default: "2"
         * Plotly @type: number
         */
        width?: number,
        /**
         * Determines whether or not contour lines about the z dimension are highlighted on hover.
         * @default: "true"
         * Plotly @type: boolean
         */
        highlight?: boolean,
        /**
         * Sets the color of the highlighted contour lines.
         * @default: "#444"
         * Plotly @type: color
         */
        highlightcolor?: string,
        /**
         * Sets the width of the highlighted contour lines.
         * @default: "2"
         * Plotly @type: number
         */
        highlightwidth?: number,
      },
    };
    /**
     * Determines whether or not a surface is drawn. For example, set `hidesurface` to *false* `contours.x.show` to *true* and `contours.y.show` to *true* to draw a wire frame plot.
     * @default: "false"
     * Plotly @type: boolean
     */
    hidesurface?: boolean;
    lightposition?: {
      /**
       * Numeric vector, representing the X coordinate for each vertex.
       * @default: "10"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Numeric vector, representing the Y coordinate for each vertex.
       * @default: "10000"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Numeric vector, representing the Z coordinate for each vertex.
       * @default: "0"
       * Plotly @type: number
       */
      z?: number,
    };
    lighting?: {
      /**
       * Ambient light increases overall color visibility but can wash out the image.
       * @default: "0.8"
       * Plotly @type: number
       */
      ambient?: number,
      /**
       * Represents the extent that incident rays are reflected in a range of angles.
       * @default: "0.8"
       * Plotly @type: number
       */
      diffuse?: number,
      /**
       * Represents the level that incident rays are reflected in a single direction, causing shine.
       * @default: "0.05"
       * Plotly @type: number
       */
      specular?: number,
      /**
       * Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
       * @default: "0.5"
       * Plotly @type: number
       */
      roughness?: number,
      /**
       * Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
       * @default: "0.2"
       * Plotly @type: number
       */
      fresnel?: number,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `z` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    zcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
     * @default: "scene"
     * Plotly @type: subplotid
     */
    scene?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  surfacecolor .
     * Plotly @type: string
     */
    surfacecolorsrc?: string;

  }
  /**
   * mesh3d: Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm
   */
  export interface Mesh3D extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the surface.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.
     * Plotly @type: data_array
     */
    i?: any[];
    /**
     * A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.
     * Plotly @type: data_array
     */
    j?: any[];
    /**
     * A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.
     * Plotly @type: data_array
     */
    k?: any[];
    /**
     * Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.
     * @default: "z"
     * Plotly @type: enumerated
     */
    delaunayaxis?: "x"|"y"|"z";
    /**
     * Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.
     * @default: "-1"
     * Plotly @type: number
     */
    alphahull?: number;
    /**
     * Sets the vertex intensity values, used for plotting fields on meshes
     * Plotly @type: data_array
     */
    intensity?: any[];
    /**
     * Sets the color of the whole mesh
     * Plotly @type: color
     */
    color?: string;
    /**
     * Sets the color of each vertex Overrides *color*.
     * Plotly @type: data_array
     */
    vertexcolor?: any[];
    /**
     * Sets the color of each face Overrides *color* and *vertexcolor*.
     * Plotly @type: data_array
     */
    facecolor?: any[];
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    cauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.
     * Plotly @type: number
     */
    cmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.
     * Plotly @type: number
     */
    cmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "true"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    /**
     * Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.
     * @default: "false"
     * Plotly @type: boolean
     */
    flatshading?: boolean;
    contour?: {
      /**
       * Sets whether or not dynamic contours are shown on hover
       * @default: "false"
       * Plotly @type: boolean
       */
      show?: boolean,
      /**
       * Sets the color of the contour lines.
       * @default: "#444"
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the width of the contour lines.
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
    };
    lightposition?: {
      /**
       * Numeric vector, representing the X coordinate for each vertex.
       * @default: "100000"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Numeric vector, representing the Y coordinate for each vertex.
       * @default: "100000"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Numeric vector, representing the Z coordinate for each vertex.
       * @default: "0"
       * Plotly @type: number
       */
      z?: number,
    };
    lighting?: {
      /**
       * Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
       * @default: "1E-12"
       * Plotly @type: number
       */
      vertexnormalsepsilon?: number,
      /**
       * Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
       * @default: "0.000001"
       * Plotly @type: number
       */
      facenormalsepsilon?: number,
      /**
       * Ambient light increases overall color visibility but can wash out the image.
       * @default: "0.8"
       * Plotly @type: number
       */
      ambient?: number,
      /**
       * Represents the extent that incident rays are reflected in a range of angles.
       * @default: "0.8"
       * Plotly @type: number
       */
      diffuse?: number,
      /**
       * Represents the level that incident rays are reflected in a single direction, causing shine.
       * @default: "0.05"
       * Plotly @type: number
       */
      specular?: number,
      /**
       * Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
       * @default: "0.5"
       * Plotly @type: number
       */
      roughness?: number,
      /**
       * Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
       * @default: "0.2"
       * Plotly @type: number
       */
      fresnel?: number,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `z` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    zcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
     * @default: "scene"
     * Plotly @type: subplotid
     */
    scene?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  i .
     * Plotly @type: string
     */
    isrc?: string;
    /**
     * Sets the source reference on plot.ly for  j .
     * Plotly @type: string
     */
    jsrc?: string;
    /**
     * Sets the source reference on plot.ly for  k .
     * Plotly @type: string
     */
    ksrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  intensity .
     * Plotly @type: string
     */
    intensitysrc?: string;
    /**
     * Sets the source reference on plot.ly for  vertexcolor .
     * Plotly @type: string
     */
    vertexcolorsrc?: string;
    /**
     * Sets the source reference on plot.ly for  facecolor .
     * Plotly @type: string
     */
    facecolorsrc?: string;

  }
  /**
   * cone: Use cone traces to visualize vector fields.  Specify a vector field using 6 1D arrays, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, `w`. The cones are drawn exactly at the positions given by `x`, `y` and `z`.
   */
  export interface Cone extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the surface.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "x+y+z+norm+text+name"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"u"|"v"|"w"|"norm"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates of the vector field and of the displayed cones.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the y coordinates of the vector field and of the displayed cones.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the z coordinates of the vector field and of the displayed cones.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets the x components of the vector field.
     * Plotly @type: data_array
     */
    u?: any[];
    /**
     * Sets the y components of the vector field.
     * Plotly @type: data_array
     */
    v?: any[];
    /**
     * Sets the z components of the vector field.
     * Plotly @type: data_array
     */
    w?: any[];
    /**
     * Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as *absolute* value (in the same units as the vector field).
     * @default: "scaled"
     * Plotly @type: enumerated
     */
    sizemode?: "scaled"|"absolute";
    /**
     * Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`. This factor (computed internally) corresponds to the minimum "time" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5* With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.
     * Plotly @type: number
     */
    sizeref?: number;
    /**
     * Sets the cones' anchor with respect to their x/y/z positions. Note that *cm* denote the cone's center of mass which corresponds to 1/4 from the tail to tip.
     * @default: "cm"
     * Plotly @type: enumerated
     */
    anchor?: "tip"|"tail"|"cm"|"center";
    /**
     * Sets the text elements associated with the cones. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    cauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.
     * Plotly @type: number
     */
    cmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.
     * Plotly @type: number
     */
    cmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "true"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    lightposition?: {
      /**
       * Numeric vector, representing the X coordinate for each vertex.
       * @default: "100000"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Numeric vector, representing the Y coordinate for each vertex.
       * @default: "100000"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Numeric vector, representing the Z coordinate for each vertex.
       * @default: "0"
       * Plotly @type: number
       */
      z?: number,
    };
    lighting?: {
      /**
       * Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
       * @default: "1E-12"
       * Plotly @type: number
       */
      vertexnormalsepsilon?: number,
      /**
       * Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
       * @default: "0.000001"
       * Plotly @type: number
       */
      facenormalsepsilon?: number,
      /**
       * Ambient light increases overall color visibility but can wash out the image.
       * @default: "0.8"
       * Plotly @type: number
       */
      ambient?: number,
      /**
       * Represents the extent that incident rays are reflected in a range of angles.
       * @default: "0.8"
       * Plotly @type: number
       */
      diffuse?: number,
      /**
       * Represents the level that incident rays are reflected in a single direction, causing shine.
       * @default: "0.05"
       * Plotly @type: number
       */
      specular?: number,
      /**
       * Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
       * @default: "0.5"
       * Plotly @type: number
       */
      roughness?: number,
      /**
       * Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
       * @default: "0.2"
       * Plotly @type: number
       */
      fresnel?: number,
    };
    /**
     * Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
     * @default: "scene"
     * Plotly @type: subplotid
     */
    scene?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  u .
     * Plotly @type: string
     */
    usrc?: string;
    /**
     * Sets the source reference on plot.ly for  v .
     * Plotly @type: string
     */
    vsrc?: string;
    /**
     * Sets the source reference on plot.ly for  w .
     * Plotly @type: string
     */
    wsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * streamtube: Use a streamtube trace to visualize flow in a vector field.  Specify a vector field using 6 1D arrays of equal length, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, and `w`.  By default, the tubes' starting positions will be cut from the vector field's x-z plane at its minimum y value. To specify your own starting position, use attributes `starts.x`, `starts.y` and `starts.z`.
   */
  export interface Streamtube extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the surface.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "x+y+z+norm+text+name"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"u"|"v"|"w"|"norm"|"divergence"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates of the vector field.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the y coordinates of the vector field.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Sets the z coordinates of the vector field.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets the x components of the vector field.
     * Plotly @type: data_array
     */
    u?: any[];
    /**
     * Sets the y components of the vector field.
     * Plotly @type: data_array
     */
    v?: any[];
    /**
     * Sets the z components of the vector field.
     * Plotly @type: data_array
     */
    w?: any[];
    starts?: {
      /**
       * Sets the x components of the starting position of the streamtubes
       * Plotly @type: data_array
       */
      x?: any[],
      /**
       * Sets the y components of the starting position of the streamtubes
       * Plotly @type: data_array
       */
      y?: any[],
      /**
       * Sets the z components of the starting position of the streamtubes
       * Plotly @type: data_array
       */
      z?: any[],
      /**
       * Sets the source reference on plot.ly for  x .
       * Plotly @type: string
       */
      xsrc?: string,
      /**
       * Sets the source reference on plot.ly for  y .
       * Plotly @type: string
       */
      ysrc?: string,
      /**
       * Sets the source reference on plot.ly for  z .
       * Plotly @type: string
       */
      zsrc?: string,
    };
    /**
     * The maximum number of displayed segments in a streamtube.
     * @default: "1000"
     * Plotly @type: integer
     */
    maxdisplayed?: number;
    /**
     * The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.
     * @default: "1"
     * Plotly @type: number
     */
    sizeref?: number;
    /**
     * Sets a text element associated with this trace. If trace `hoverinfo` contains a *text* flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.
     * Plotly @type: string
     */
    text?: string;
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    cauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.
     * Plotly @type: number
     */
    cmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.
     * Plotly @type: number
     */
    cmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "true"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    lightposition?: {
      /**
       * Numeric vector, representing the X coordinate for each vertex.
       * @default: "100000"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Numeric vector, representing the Y coordinate for each vertex.
       * @default: "100000"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Numeric vector, representing the Z coordinate for each vertex.
       * @default: "0"
       * Plotly @type: number
       */
      z?: number,
    };
    lighting?: {
      /**
       * Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
       * @default: "1E-12"
       * Plotly @type: number
       */
      vertexnormalsepsilon?: number,
      /**
       * Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
       * @default: "0.000001"
       * Plotly @type: number
       */
      facenormalsepsilon?: number,
      /**
       * Ambient light increases overall color visibility but can wash out the image.
       * @default: "0.8"
       * Plotly @type: number
       */
      ambient?: number,
      /**
       * Represents the extent that incident rays are reflected in a range of angles.
       * @default: "0.8"
       * Plotly @type: number
       */
      diffuse?: number,
      /**
       * Represents the level that incident rays are reflected in a single direction, causing shine.
       * @default: "0.05"
       * Plotly @type: number
       */
      specular?: number,
      /**
       * Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
       * @default: "0.5"
       * Plotly @type: number
       */
      roughness?: number,
      /**
       * Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
       * @default: "0.2"
       * Plotly @type: number
       */
      fresnel?: number,
    };
    /**
     * Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
     * @default: "scene"
     * Plotly @type: subplotid
     */
    scene?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  u .
     * Plotly @type: string
     */
    usrc?: string;
    /**
     * Sets the source reference on plot.ly for  v .
     * Plotly @type: string
     */
    vsrc?: string;
    /**
     * Sets the source reference on plot.ly for  w .
     * Plotly @type: string
     */
    wsrc?: string;

  }
  /**
   * scattergeo: The data visualized as scatter point or lines on a geographic map is provided either by longitude/latitude pairs in `lon` and `lat` respectively or by geographic location IDs or names in `locations`.
   */
  export interface ScatterGeo extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "lon"|"lat"|"location"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the longitude coordinates (in degrees East).
     * Plotly @type: data_array
     */
    lon?: any[];
    /**
     * Sets the latitude coordinates (in degrees North).
     * Plotly @type: data_array
     */
    lat?: any[];
    /**
     * Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.
     * Plotly @type: data_array
     */
    locations?: any[];
    /**
     * Determines the set of locations used to match entries in `locations` to regions on the map.
     * @default: "ISO-3"
     * Plotly @type: enumerated
     */
    locationmode?: "ISO-3"|"USA-states"|"country names";
    /**
     * Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
     * @default: "markers"
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    /**
     * Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    /**
     * Sets the text font.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "middle center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right"|string|string[];
    line?: {
      /**
       * Sets the line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    marker?: {
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      gradient?: {
        /**
         * Sets the type of gradient used to fill the markers
         * @default: "none"
         * Plotly @type: enumerated
         */
        type?: "radial"|"horizontal"|"vertical"|"none"|string|string[],
        /**
         * Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  type .
         * Plotly @type: string
         */
        typesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.
     * @default: "none"
     * Plotly @type: enumerated
     */
    fill?: "none"|"toself";
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    /**
     * Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.
     * @default: "geo"
     * Plotly @type: subplotid
     */
    geo?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  lon .
     * Plotly @type: string
     */
    lonsrc?: string;
    /**
     * Sets the source reference on plot.ly for  lat .
     * Plotly @type: string
     */
    latsrc?: string;
    /**
     * Sets the source reference on plot.ly for  locations .
     * Plotly @type: string
     */
    locationssrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;

  }
  /**
   * choropleth: The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`.
   */
  export interface Choropleth extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "location"|"z"|"text"|"name"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the coordinates via location IDs or names. See `locationmode` for more info.
     * Plotly @type: data_array
     */
    locations?: any[];
    /**
     * Determines the set of locations used to match entries in `locations` to regions on the map.
     * @default: "ISO-3"
     * Plotly @type: enumerated
     */
    locationmode?: "ISO-3"|"USA-states"|"country names";
    /**
     * Sets the color values.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets the text elements associated with each location.
     * Plotly @type: string
     */
    text?: string|string[];
    marker?: {
      line?: {
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * @default: "1"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
      },
      /**
       * Sets the opacity of the locations.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
    };
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
      },
    };
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    zauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
     * Plotly @type: number
     */
    zmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
     * Plotly @type: number
     */
    zmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "true"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    /**
     * Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.
     * @default: "geo"
     * Plotly @type: subplotid
     */
    geo?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  locations .
     * Plotly @type: string
     */
    locationssrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * scattergl: The data visualized as scatter point or lines is set in `x` and `y` using the WebGL plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays.
   */
  export interface ScatterGL extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
     * @default: "0"
     * Plotly @type: any
     */
    x0?: any;
    /**
     * Sets the x coordinate step. See `x0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dx?: number;
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
     * @default: "0"
     * Plotly @type: any
     */
    y0?: any;
    /**
     * Sets the y coordinate step. See `y0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dy?: number;
    /**
     * Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "middle center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right"|string|string[];
    /**
     * Sets the text font.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Determines the drawing mode for this scatter trace.
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    line?: {
      /**
       * Sets the line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the style of the lines.
       * @default: "solid"
       * Plotly @type: enumerated
       */
      dash?: "solid"|"dot"|"dash"|"longdash"|"dashdot"|"longdashdot",
    };
    marker?: {
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      line?: {
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    /**
     * Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
     * @default: "none"
     * Plotly @type: enumerated
     */
    fill?: "none"|"tozeroy"|"tozerox"|"tonexty"|"tonextx"|"toself"|"tonext";
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    error_x?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Plotly @type: boolean
       */
      copy_ystyle?: boolean,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    error_y?: {
      /**
       * Determines whether or not this set of error bars is visible.
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.
       * Plotly @type: enumerated
       */
      type?: "percent"|"constant"|"sqrt"|"data",
      /**
       * Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
       * Plotly @type: boolean
       */
      symmetric?: boolean,
      /**
       * Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      array?: any[],
      /**
       * Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
       * Plotly @type: data_array
       */
      arrayminus?: any[],
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
       * @default: "10"
       * Plotly @type: number
       */
      value?: number,
      /**
       * Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
       * @default: "10"
       * Plotly @type: number
       */
      valueminus?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      traceref?: number,
      /**
       * @default: "0"
       * Plotly @type: integer
       */
      tracerefminus?: number,
      /**
       * Sets the stoke color of the error bars.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the thickness (in px) of the error bars.
       * @default: "2"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the width (in px) of the cross-bar at both ends of the error bars.
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the source reference on plot.ly for  array .
       * Plotly @type: string
       */
      arraysrc?: string,
      /**
       * Sets the source reference on plot.ly for  arrayminus .
       * Plotly @type: string
       */
      arrayminussrc?: string,
    };
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets the calendar system to use with `y` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    ycalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;

  }
  /**
   * splom: Splom traces generate scatter plot matrix visualizations. Each splom `dimensions` items correspond to a generated axis. Values for each of those dimensions are set in `dimensions[i].values`. Splom traces support all `scattergl` marker style attributes. Specify `layout.grid` attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style.
   */
  export interface Splom extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    dimensions?: {
      /**
       * Determines whether or not this dimension is shown on the graph. Note that even visible false dimension contribute to the default grid generate by this splom trace.
       * @default: "true"
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * Sets the label corresponding to this splom dimension.
       * Plotly @type: string
       */
      label?: string,
      /**
       * Sets the dimension values to be plotted.
       * Plotly @type: data_array
       */
      values?: any[],
      axis?: {
        /**
         * Sets the axis type for this dimension's generated x and y axes. Note that the axis `type` values set in layout take precedence over this attribute.
         * Plotly @type: enumerated
         */
        type?: "linear"|"log"|"date"|"category",
      },
      /**
       * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
       * Plotly @type: string
       */
      name?: string,
      /**
       * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
       * Plotly @type: string
       */
      templateitemname?: string,
      /**
       * Sets the source reference on plot.ly for  values .
       * Plotly @type: string
       */
      valuessrc?: string,
    }[];
    /**
     * Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.
     * Plotly @type: string
     */
    text?: string|string[];
    marker?: {
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      line?: {
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
    };
    /**
     * Sets the list of x axes corresponding to this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions.
     * Plotly @type: info_array ([[valType:subplotid, regex:/^x([2-9]|[1-9][0-9]+)?$/, editType:plot]])
     */
    xaxes?: [string];
    /**
     * Sets the list of y axes corresponding to this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions.
     * Plotly @type: info_array ([[valType:subplotid, regex:/^y([2-9]|[1-9][0-9]+)?$/, editType:plot]])
     */
    yaxes?: [string];
    diagonal?: {
      /**
       * Determines whether or not subplots on the diagonal are displayed.
       * @default: "true"
       * Plotly @type: boolean
       */
      visible?: boolean,
    };
    /**
     * Determines whether or not subplots on the upper half from the diagonal are displayed.
     * @default: "true"
     * Plotly @type: boolean
     */
    showupperhalf?: boolean;
    /**
     * Determines whether or not subplots on the lower half from the diagonal are displayed.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlowerhalf?: boolean;
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
    };
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * pointcloud: The data visualized as a point cloud set in `x` and `y` using the WebGl plotting engine.
   */
  export interface PointCloud extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Faster alternative to specifying `x` and `y` separately. If supplied, it must be a typed `Float32Array` array that represents points such that `xy[i * 2] = x[i]` and `xy[i * 2 + 1] = y[i]`
     * Plotly @type: data_array
     */
    xy?: any[];
    /**
     * A sequential value, 0..n, supply it to avoid creating this array inside plotting. If specified, it must be a typed `Int32Array` array. Its length must be equal to or greater than the number of points. For the best performance and memory use, create one large `indices` typed array that is guaranteed to be at least as long as the largest number of points during use, and reuse it on each `Plotly.restyle()` call.
     * Plotly @type: data_array
     */
    indices?: any[];
    /**
     * Specify `xbounds` in the shape of `[xMin, xMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `ybounds` for the performance benefits.
     * Plotly @type: data_array
     */
    xbounds?: any[];
    /**
     * Specify `ybounds` in the shape of `[yMin, yMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `xbounds` for the performance benefits.
     * Plotly @type: data_array
     */
    ybounds?: any[];
    /**
     * Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    marker?: {
      /**
       * Sets the marker fill color. It accepts a specific color.If the color is not fully opaque and there are hundreds of thousandsof points, it may cause slower zooming and panning.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the marker opacity. The default value is `1` (fully opaque). If the markers are not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning. Opacity fades the color even if `blend` is left on `false` even if there is no translucency effect in that case.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number,
      /**
       * Determines if colors are blended together for a translucency effect in case `opacity` is specified as a value less then `1`. Setting `blend` to `true` reduces zoom/pan speed if used with large numbers of points.
       * Plotly @type: boolean
       */
      blend?: boolean,
      /**
       * Sets the minimum size (in px) of the rendered marker points, effective when the `pointcloud` shows a million or more points.
       * @default: "0.5"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Sets the maximum size (in px) of the rendered marker points. Effective when the `pointcloud` shows only few points.
       * @default: "20"
       * Plotly @type: number
       */
      sizemax?: number,
      border?: {
        /**
         * Sets the stroke color. It accepts a specific color. If the color is not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Specifies what fraction of the marker area is covered with the border.
         * @default: "0"
         * Plotly @type: number
         */
        arearatio?: number,
      },
    };
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  xy .
     * Plotly @type: string
     */
    xysrc?: string;
    /**
     * Sets the source reference on plot.ly for  indices .
     * Plotly @type: string
     */
    indicessrc?: string;
    /**
     * Sets the source reference on plot.ly for  xbounds .
     * Plotly @type: string
     */
    xboundssrc?: string;
    /**
     * Sets the source reference on plot.ly for  ybounds .
     * Plotly @type: string
     */
    yboundssrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * heatmapgl: WebGL version of the heatmap trace type.
   */
  export interface HeatmapGL extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the z data.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
     * @default: "0"
     * Plotly @type: any
     */
    x0?: any;
    /**
     * Sets the x coordinate step. See `x0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dx?: number;
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
     * @default: "0"
     * Plotly @type: any
     */
    y0?: any;
    /**
     * Sets the y coordinate step. See `y0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    dy?: number;
    /**
     * Sets the text elements associated with each z value.
     * Plotly @type: data_array
     */
    text?: any[];
    /**
     * Transposes the z data.
     * @default: "false"
     * Plotly @type: boolean
     */
    transpose?: boolean;
    /**
     * If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
     * Plotly @type: enumerated
     */
    xtype?: "array"|"scaled";
    /**
     * If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
     * Plotly @type: enumerated
     */
    ytype?: "array"|"scaled";
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    zauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
     * Plotly @type: number
     */
    zmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
     * Plotly @type: number
     */
    zmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "false"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * parcoords: Parallel coordinates for multidimensional exploratory data analysis. The samples are specified in `dimensions`. The colors are set in `line.color`.
   */
  export interface ParCoords extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    domain?: {
      /**
       * Sets the horizontal domain of this parcoords trace (in plot fraction).
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:calc], [valType:number, min:0, max:1, editType:calc]])
       */
      x?: [number, number],
      /**
       * Sets the vertical domain of this parcoords trace (in plot fraction).
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:calc], [valType:number, min:0, max:1, editType:calc]])
       */
      y?: [number, number],
      /**
       * If there is a layout grid, use the domain for this row in the grid for this parcoords trace .
       * @default: "0"
       * Plotly @type: integer
       */
      row?: number,
      /**
       * If there is a layout grid, use the domain for this column in the grid for this parcoords trace .
       * @default: "0"
       * Plotly @type: integer
       */
      column?: number,
    };
    /**
     * Sets the font for the `dimension` labels.
     */
    labelfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets the font for the `dimension` tick values.
     */
    tickfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets the font for the `dimension` range values.
     */
    rangefont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    dimensions?: {
      /**
       * The shown name of the dimension.
       * Plotly @type: string
       */
      label?: string,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Sets the tick label formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-format/blob/master/README.md#locale_format
       * @default: "3s"
       * Plotly @type: string
       */
      tickformat?: string,
      /**
       * Shows the dimension when set to `true` (the default). Hides the dimension for `false`.
       * @default: "true"
       * Plotly @type: boolean
       */
      visible?: boolean,
      /**
       * The domain range that represents the full, shown axis extent. Defaults to the `values` extent. Must be an array of `[fromValue, toValue]` with finite numbers as elements.
       * Plotly @type: info_array ([[valType:number, editType:calc], [valType:number, editType:calc]])
       */
      range?: [number, number],
      /**
       * The domain range to which the filter on the dimension is constrained. Must be an array of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.
       * Plotly @type: info_array ([[valType:number, editType:calc], [valType:number, editType:calc]])
       */
      constraintrange?: [number, number],
      /**
       * Do we allow multiple selection ranges or just a single range?
       * @default: "true"
       * Plotly @type: boolean
       */
      multiselect?: boolean,
      /**
       * Dimension values. `values[n]` represents the value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated). Each value must be a finite number.
       * Plotly @type: data_array
       */
      values?: any[],
      /**
       * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
       * Plotly @type: string
       */
      name?: string,
      /**
       * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
       * Plotly @type: string
       */
      templateitemname?: string,
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
      /**
       * Sets the source reference on plot.ly for  values .
       * Plotly @type: string
       */
      valuessrc?: string,
    }[];
    line?: {
      /**
       * Sets thelinecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax`  Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * @default: "[[0, #440154], [0.06274509803921569, #48186a], [0.12549019607843137, #472d7b], [0.18823529411764706, #424086], [0.25098039215686274, #3b528b], [0.3137254901960784, #33638d], [0.3764705882352941, #2c728e], [0.4392156862745098, #26828e], [0.5019607843137255, #21918c], [0.5647058823529412, #1fa088], [0.6274509803921569, #28ae80], [0.6901960784313725, #3fbc73], [0.7529411764705882, #5ec962], [0.8156862745098039, #84d44b], [0.8784313725490196, #addc30], [0.9411764705882353, #d8e219], [1, #fde725]]"
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "false"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `line.color`is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;

  }
  /**
   * scattermapbox: The data visualized as scatter point, lines or marker symbols on a Mapbox GL geographic map is provided by longitude/latitude pairs in `lon` and `lat`.
   */
  export interface ScatterMapBox extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "lon"|"lat"|"text"|"name"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the longitude coordinates (in degrees East).
     * Plotly @type: data_array
     */
    lon?: any[];
    /**
     * Sets the latitude coordinates (in degrees North).
     * Plotly @type: data_array
     */
    lat?: any[];
    /**
     * Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.
     * @default: "markers"
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    /**
     * Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    line?: {
      /**
       * Sets the line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    marker?: {
      /**
       * Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for *circle* symbols.
       * @default: "circle"
       * Plotly @type: string
       */
      symbol?: string|string[],
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.
     * @default: "none"
     * Plotly @type: enumerated
     */
    fill?: "none"|"toself";
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    /**
     * Sets the icon text font. Has an effect only when `type` is set to *symbol*.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * @default: "Open Sans Regular, Arial Unicode MS Regular"
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "middle center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right";
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
    };
    /**
     * Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.
     * @default: "mapbox"
     * Plotly @type: subplotid
     */
    subplot?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  lon .
     * Plotly @type: string
     */
    lonsrc?: string;
    /**
     * Sets the source reference on plot.ly for  lat .
     * Plotly @type: string
     */
    latsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;

  }
  /**
   * sankey: Sankey plots for network flow data analysis. The nodes are specified in `nodes` and the links between sources and targets in `links`. The colors are set in `nodes[i].color` and `links[i].color`; otherwise defaults are used.
   */
  export interface Sankey extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "label"|"text"|"value"|"percent"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    domain?: {
      /**
       * Sets the horizontal domain of this sankey trace (in plot fraction).
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:calc], [valType:number, min:0, max:1, editType:calc]])
       */
      x?: [number, number],
      /**
       * Sets the vertical domain of this sankey trace (in plot fraction).
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:calc], [valType:number, min:0, max:1, editType:calc]])
       */
      y?: [number, number],
      /**
       * If there is a layout grid, use the domain for this row in the grid for this sankey trace .
       * @default: "0"
       * Plotly @type: integer
       */
      row?: number,
      /**
       * If there is a layout grid, use the domain for this column in the grid for this sankey trace .
       * @default: "0"
       * Plotly @type: integer
       */
      column?: number,
    };
    /**
     * Sets the orientation of the Sankey diagram.
     * @default: "h"
     * Plotly @type: enumerated
     */
    orientation?: "v"|"h";
    /**
     * Sets the value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-format/blob/master/README.md#locale_format
     * @default: ".3s"
     * Plotly @type: string
     */
    valueformat?: string;
    /**
     * Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.
     * Plotly @type: string
     */
    valuesuffix?: string;
    /**
     * If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.
     * @default: "snap"
     * Plotly @type: enumerated
     */
    arrangement?: "snap"|"perpendicular"|"freeform"|"fixed";
    /**
     * Sets the font for node labels
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string,
      /**
       * Plotly @type: number
       */
      size?: number,
      /**
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * The nodes of the Sankey plot.
     */
    node?: {
      /**
       * The shown name of the node.
       * @default: "[]"
       * Plotly @type: data_array
       */
      label?: any[],
      /**
       * Sets the `node` color. It can be a single value, or an array for specifying color for each `node`. If `node.color` is omitted, then the default `Plotly` color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.
       * Plotly @type: color
       */
      color?: string|string[],
      line?: {
        /**
         * Sets the color of the `line` around each `node`.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the width (in px) of the `line` around each `node`.
         * @default: "0.5"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
      },
      /**
       * Sets the padding (in px) between the `nodes`.
       * @default: "20"
       * Plotly @type: number
       */
      pad?: number,
      /**
       * Sets the thickness (in px) of the `nodes`.
       * @default: "20"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Sets the source reference on plot.ly for  label .
       * Plotly @type: string
       */
      labelsrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * The links of the Sankey plot.
     */
    link?: {
      /**
       * The shown name of the link.
       * @default: "[]"
       * Plotly @type: data_array
       */
      label?: any[],
      /**
       * Sets the `link` color. It can be a single value, or an array for specifying color for each `link`. If `link.color` is omitted, then by default, a translucent grey link will be used.
       * Plotly @type: color
       */
      color?: string|string[],
      line?: {
        /**
         * Sets the color of the `line` around each `link`.
         * @default: "#444"
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the width (in px) of the `line` around each `link`.
         * @default: "0"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
      },
      /**
       * An integer number `[0..nodes.length - 1]` that represents the source node.
       * @default: "[]"
       * Plotly @type: data_array
       */
      source?: any[],
      /**
       * An integer number `[0..nodes.length - 1]` that represents the target node.
       * @default: "[]"
       * Plotly @type: data_array
       */
      target?: any[],
      /**
       * A numeric value representing the flow volume value.
       * @default: "[]"
       * Plotly @type: data_array
       */
      value?: any[],
      /**
       * Sets the source reference on plot.ly for  label .
       * Plotly @type: string
       */
      labelsrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  source .
       * Plotly @type: string
       */
      sourcesrc?: string,
      /**
       * Sets the source reference on plot.ly for  target .
       * Plotly @type: string
       */
      targetsrc?: string,
      /**
       * Sets the source reference on plot.ly for  value .
       * Plotly @type: string
       */
      valuesrc?: string,
    };
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;

  }
  /**
   * table: Table view for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a column-major order, ie. the grid is represented as a vector of column vectors.
   */
  export interface Table extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    domain?: {
      /**
       * Sets the horizontal domain of this table trace (in plot fraction).
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:calc], [valType:number, min:0, max:1, editType:calc]])
       */
      x?: [number, number],
      /**
       * Sets the vertical domain of this table trace (in plot fraction).
       * @default: "[0, 1]"
       * Plotly @type: info_array ([[valType:number, min:0, max:1, editType:calc], [valType:number, min:0, max:1, editType:calc]])
       */
      y?: [number, number],
      /**
       * If there is a layout grid, use the domain for this row in the grid for this table trace .
       * @default: "0"
       * Plotly @type: integer
       */
      row?: number,
      /**
       * If there is a layout grid, use the domain for this column in the grid for this table trace .
       * @default: "0"
       * Plotly @type: integer
       */
      column?: number,
    };
    /**
     * The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.
     * Plotly @type: number
     */
    columnwidth?: number|number[];
    /**
     * Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.
     * Plotly @type: data_array
     */
    columnorder?: any[];
    header?: {
      /**
       * Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.
       * @default: "[]"
       * Plotly @type: data_array
       */
      values?: any[],
      /**
       * Sets the cell value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-format/blob/master/README.md#locale_format
       * @default: "[]"
       * Plotly @type: data_array
       */
      format?: any[],
      /**
       * Prefix for cell values.
       * Plotly @type: string
       */
      prefix?: string|string[],
      /**
       * Suffix for cell values.
       * Plotly @type: string
       */
      suffix?: string|string[],
      /**
       * The height of cells.
       * @default: "28"
       * Plotly @type: number
       */
      height?: number,
      /**
       * Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans more two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
       * @default: "center"
       * Plotly @type: enumerated
       */
      align?: "left"|"center"|"right"|string|string[],
      line?: {
        /**
         * @default: "1"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * @default: "grey"
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      fill?: {
        /**
         * Sets the cell fill color. It accepts either a specific color or an array of colors.
         * @default: "white"
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  values .
       * Plotly @type: string
       */
      valuessrc?: string,
      /**
       * Sets the source reference on plot.ly for  format .
       * Plotly @type: string
       */
      formatsrc?: string,
      /**
       * Sets the source reference on plot.ly for  prefix .
       * Plotly @type: string
       */
      prefixsrc?: string,
      /**
       * Sets the source reference on plot.ly for  suffix .
       * Plotly @type: string
       */
      suffixsrc?: string,
      /**
       * Sets the source reference on plot.ly for  align .
       * Plotly @type: string
       */
      alignsrc?: string,
    };
    cells?: {
      /**
       * Cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.
       * @default: "[]"
       * Plotly @type: data_array
       */
      values?: any[],
      /**
       * Sets the cell value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-format/blob/master/README.md#locale_format
       * @default: "[]"
       * Plotly @type: data_array
       */
      format?: any[],
      /**
       * Prefix for cell values.
       * Plotly @type: string
       */
      prefix?: string|string[],
      /**
       * Suffix for cell values.
       * Plotly @type: string
       */
      suffix?: string|string[],
      /**
       * The height of cells.
       * @default: "20"
       * Plotly @type: number
       */
      height?: number,
      /**
       * Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans more two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
       * @default: "center"
       * Plotly @type: enumerated
       */
      align?: "left"|"center"|"right"|string|string[],
      line?: {
        /**
         * @default: "1"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * @default: "grey"
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      fill?: {
        /**
         * Sets the cell fill color. It accepts either a specific color or an array of colors.
         * @default: "white"
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  values .
       * Plotly @type: string
       */
      valuessrc?: string,
      /**
       * Sets the source reference on plot.ly for  format .
       * Plotly @type: string
       */
      formatsrc?: string,
      /**
       * Sets the source reference on plot.ly for  prefix .
       * Plotly @type: string
       */
      prefixsrc?: string,
      /**
       * Sets the source reference on plot.ly for  suffix .
       * Plotly @type: string
       */
      suffixsrc?: string,
      /**
       * Sets the source reference on plot.ly for  align .
       * Plotly @type: string
       */
      alignsrc?: string,
    };
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  columnwidth .
     * Plotly @type: string
     */
    columnwidthsrc?: string;
    /**
     * Sets the source reference on plot.ly for  columnorder .
     * Plotly @type: string
     */
    columnordersrc?: string;

  }
  /**
   * carpet: The data describing carpet axis layout is set in `y` and (optionally) also `x`. If only `y` is present, `x` the plot is interpreted as a cheater plot and is filled in using the `y` values. `x` and `y` may either be 2D arrays matching with each dimension matching that of `a` and `b`, or they may be 1D arrays with total length equal to that of `a` and `b`.
   */
  export interface Carpet extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * An identifier for this carpet, so that `scattercarpet` and `scattercontour` traces can specify a carpet plot on which they lie
     * Plotly @type: string
     */
    carpet?: string;
    /**
     * A two dimensional array of x coordinates at each carpet point. If ommitted, the plot is a cheater plot and the xaxis is hidden by default.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * A two dimensional array of y coordinates at each carpet point.
     * Plotly @type: data_array
     */
    y?: any[];
    /**
     * An array containing values of the first parameter value
     * Plotly @type: data_array
     */
    a?: any[];
    /**
     * Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.
     * @default: "0"
     * Plotly @type: number
     */
    a0?: number;
    /**
     * Sets the a coordinate step. See `a0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    da?: number;
    /**
     * A two dimensional array of y coordinates at each carpet point.
     * Plotly @type: data_array
     */
    b?: any[];
    /**
     * Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.
     * @default: "0"
     * Plotly @type: number
     */
    b0?: number;
    /**
     * Sets the b coordinate step. See `b0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    db?: number;
    /**
     * The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been ommitted.
     * @default: "1"
     * Plotly @type: number
     */
    cheaterslope?: number;
    aaxis?: {
      /**
       * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
       * Plotly @type: color
       */
      color?: string,
      /**
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
      /**
       * Sets the title of this axis.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this axis' title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * An additional amount by which to offset the title from the tick labels, given in pixels
       * @default: "10"
       * Plotly @type: number
       */
      titleoffset?: number,
      /**
       * Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
       * @default: "-"
       * Plotly @type: enumerated
       */
      type?: "-"|"linear"|"date"|"category",
      /**
       * Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
       * @default: "true"
       * Plotly @type: enumerated
       */
      autorange?: true|false|"reversed",
      /**
       * If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.
       * @default: "normal"
       * Plotly @type: enumerated
       */
      rangemode?: "normal"|"tozero"|"nonnegative",
      /**
       * Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
       */
      range?: [any, any],
      /**
       * Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
       * @default: "false"
       * Plotly @type: boolean
       */
      fixedrange?: boolean,
      /**
       * @default: "value"
       * Plotly @type: enumerated
       */
      cheatertype?: "index"|"value",
      /**
       * @default: "array"
       * Plotly @type: enumerated
       */
      tickmode?: "linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.
       * @default: "start"
       * Plotly @type: enumerated
       */
      showticklabels?: "start"|"end"|"both"|"none",
      /**
       * Sets the tick font.
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.
       * @default: "trace"
       * Plotly @type: enumerated
       */
      categoryorder?: "trace"|"category ascending"|"category descending"|"array",
      /**
       * Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
       * Plotly @type: data_array
       */
      categoryarray?: any[],
      /**
       * Extra padding between label and the axis
       * @default: "10"
       * Plotly @type: integer
       */
      labelpadding?: number,
      /**
       * Sets a axis label prefix.
       * Plotly @type: string
       */
      labelprefix?: string,
      /**
       * Sets a axis label suffix.
       * Plotly @type: string
       */
      labelsuffix?: string,
      /**
       * Determines whether or not a line bounding this axis is drawn.
       * @default: "false"
       * Plotly @type: boolean
       */
      showline?: boolean,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      linecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      linewidth?: number,
      /**
       * Sets the axis line color.
       * Plotly @type: color
       */
      gridcolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      gridwidth?: number,
      /**
       * Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
       * @default: "true"
       * Plotly @type: boolean
       */
      showgrid?: boolean,
      /**
       * Sets the number of minor grid ticks per major grid tick
       * @default: "0"
       * Plotly @type: integer
       */
      minorgridcount?: number,
      /**
       * Sets the width (in px) of the grid lines.
       * @default: "1"
       * Plotly @type: number
       */
      minorgridwidth?: number,
      /**
       * Sets the color of the grid lines.
       * @default: "#eee"
       * Plotly @type: color
       */
      minorgridcolor?: string,
      /**
       * Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.
       * Plotly @type: boolean
       */
      startline?: boolean,
      /**
       * Sets the line color of the start line.
       * Plotly @type: color
       */
      startlinecolor?: string,
      /**
       * Sets the width (in px) of the start line.
       * @default: "1"
       * Plotly @type: number
       */
      startlinewidth?: number,
      /**
       * Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.
       * Plotly @type: boolean
       */
      endline?: boolean,
      /**
       * Sets the width (in px) of the end line.
       * @default: "1"
       * Plotly @type: number
       */
      endlinewidth?: number,
      /**
       * Sets the line color of the end line.
       * Plotly @type: color
       */
      endlinecolor?: string,
      /**
       * The starting index of grid lines along the axis
       * @default: "0"
       * Plotly @type: number
       */
      tick0?: number,
      /**
       * The stride between grid lines along the axis
       * @default: "1"
       * Plotly @type: number
       */
      dtick?: number,
      /**
       * The starting index of grid lines along the axis
       * @default: "0"
       * Plotly @type: integer
       */
      arraytick0?: number,
      /**
       * The stride between grid lines along the axis
       * @default: "1"
       * Plotly @type: integer
       */
      arraydtick?: number,
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
      /**
       * Sets the source reference on plot.ly for  categoryarray .
       * Plotly @type: string
       */
      categoryarraysrc?: string,
    };
    baxis?: {
      /**
       * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
       * Plotly @type: color
       */
      color?: string,
      /**
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
      /**
       * Sets the title of this axis.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this axis' title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * An additional amount by which to offset the title from the tick labels, given in pixels
       * @default: "10"
       * Plotly @type: number
       */
      titleoffset?: number,
      /**
       * Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
       * @default: "-"
       * Plotly @type: enumerated
       */
      type?: "-"|"linear"|"date"|"category",
      /**
       * Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
       * @default: "true"
       * Plotly @type: enumerated
       */
      autorange?: true|false|"reversed",
      /**
       * If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.
       * @default: "normal"
       * Plotly @type: enumerated
       */
      rangemode?: "normal"|"tozero"|"nonnegative",
      /**
       * Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
       */
      range?: [any, any],
      /**
       * Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
       * @default: "false"
       * Plotly @type: boolean
       */
      fixedrange?: boolean,
      /**
       * @default: "value"
       * Plotly @type: enumerated
       */
      cheatertype?: "index"|"value",
      /**
       * @default: "array"
       * Plotly @type: enumerated
       */
      tickmode?: "linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.
       * @default: "start"
       * Plotly @type: enumerated
       */
      showticklabels?: "start"|"end"|"both"|"none",
      /**
       * Sets the tick font.
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.
       * @default: "trace"
       * Plotly @type: enumerated
       */
      categoryorder?: "trace"|"category ascending"|"category descending"|"array",
      /**
       * Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
       * Plotly @type: data_array
       */
      categoryarray?: any[],
      /**
       * Extra padding between label and the axis
       * @default: "10"
       * Plotly @type: integer
       */
      labelpadding?: number,
      /**
       * Sets a axis label prefix.
       * Plotly @type: string
       */
      labelprefix?: string,
      /**
       * Sets a axis label suffix.
       * Plotly @type: string
       */
      labelsuffix?: string,
      /**
       * Determines whether or not a line bounding this axis is drawn.
       * @default: "false"
       * Plotly @type: boolean
       */
      showline?: boolean,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      linecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      linewidth?: number,
      /**
       * Sets the axis line color.
       * Plotly @type: color
       */
      gridcolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      gridwidth?: number,
      /**
       * Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
       * @default: "true"
       * Plotly @type: boolean
       */
      showgrid?: boolean,
      /**
       * Sets the number of minor grid ticks per major grid tick
       * @default: "0"
       * Plotly @type: integer
       */
      minorgridcount?: number,
      /**
       * Sets the width (in px) of the grid lines.
       * @default: "1"
       * Plotly @type: number
       */
      minorgridwidth?: number,
      /**
       * Sets the color of the grid lines.
       * @default: "#eee"
       * Plotly @type: color
       */
      minorgridcolor?: string,
      /**
       * Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.
       * Plotly @type: boolean
       */
      startline?: boolean,
      /**
       * Sets the line color of the start line.
       * Plotly @type: color
       */
      startlinecolor?: string,
      /**
       * Sets the width (in px) of the start line.
       * @default: "1"
       * Plotly @type: number
       */
      startlinewidth?: number,
      /**
       * Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.
       * Plotly @type: boolean
       */
      endline?: boolean,
      /**
       * Sets the width (in px) of the end line.
       * @default: "1"
       * Plotly @type: number
       */
      endlinewidth?: number,
      /**
       * Sets the line color of the end line.
       * Plotly @type: color
       */
      endlinecolor?: string,
      /**
       * The starting index of grid lines along the axis
       * @default: "0"
       * Plotly @type: number
       */
      tick0?: number,
      /**
       * The stride between grid lines along the axis
       * @default: "1"
       * Plotly @type: number
       */
      dtick?: number,
      /**
       * The starting index of grid lines along the axis
       * @default: "0"
       * Plotly @type: integer
       */
      arraytick0?: number,
      /**
       * The stride between grid lines along the axis
       * @default: "1"
       * Plotly @type: integer
       */
      arraydtick?: number,
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
      /**
       * Sets the source reference on plot.ly for  categoryarray .
       * Plotly @type: string
       */
      categoryarraysrc?: string,
    };
    /**
     * The default font used for axis & tick labels on this carpet
     */
    font?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * @default: ""Open Sans", verdana, arial, sans-serif"
       * Plotly @type: string
       */
      family?: string,
      /**
       * @default: "12"
       * Plotly @type: number
       */
      size?: number,
      /**
       * @default: "#444"
       * Plotly @type: color
       */
      color?: string,
    };
    /**
     * Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
     * @default: "#444"
     * Plotly @type: color
     */
    color?: string;
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  y .
     * Plotly @type: string
     */
    ysrc?: string;
    /**
     * Sets the source reference on plot.ly for  a .
     * Plotly @type: string
     */
    asrc?: string;
    /**
     * Sets the source reference on plot.ly for  b .
     * Plotly @type: string
     */
    bsrc?: string;

  }
  /**
   * scattercarpet: Plots a scatter trace on either the first carpet axis or the carpet axis with a matching `carpet` attribute.
   */
  export interface ScatterCarpet extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "a"|"b"|"text"|"name"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * An identifier for this carpet, so that `scattercarpet` and `scattercontour` traces can specify a carpet plot on which they lie
     * Plotly @type: string
     */
    carpet?: string;
    /**
     * Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.
     * Plotly @type: data_array
     */
    a?: any[];
    /**
     * Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.
     * Plotly @type: data_array
     */
    b?: any[];
    /**
     * Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
     * @default: "markers"
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    /**
     * Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c).
     * Plotly @type: string
     */
    text?: string|string[];
    line?: {
      /**
       * Sets the line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
      /**
       * Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
       * @default: "linear"
       * Plotly @type: enumerated
       */
      shape?: "linear"|"spline",
      /**
       * Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    /**
     * Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
     * @default: "none"
     * Plotly @type: enumerated
     */
    fill?: "none"|"toself"|"tonext";
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    marker?: {
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
       * @default: "0"
       * Plotly @type: number
       */
      maxdisplayed?: number,
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      gradient?: {
        /**
         * Sets the type of gradient used to fill the markers
         * @default: "none"
         * Plotly @type: enumerated
         */
        type?: "radial"|"horizontal"|"vertical"|"none"|string|string[],
        /**
         * Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  type .
         * Plotly @type: string
         */
        typesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the text font.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "middle center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right"|string|string[];
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    /**
     * Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
     * Plotly @type: flaglist
     */
    hoveron?: "points"|"fills";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  a .
     * Plotly @type: string
     */
    asrc?: string;
    /**
     * Sets the source reference on plot.ly for  b .
     * Plotly @type: string
     */
    bsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;

  }
  /**
   * contourcarpet: Plots contours on either the first carpet axis or the carpet axis with a matching `carpet` attribute. Data `z` is interpreted as matching that of the corresponding carpet axis.
   */
  export interface ContourCarpet extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * The `carpet` of the carpet axes on which this contour trace lies
     * Plotly @type: string
     */
    carpet?: string;
    /**
     * Sets the z data.
     * Plotly @type: data_array
     */
    z?: any[];
    /**
     * Sets the x coordinates.
     * Plotly @type: data_array
     */
    a?: any[];
    /**
     * Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
     * @default: "0"
     * Plotly @type: any
     */
    a0?: any;
    /**
     * Sets the x coordinate step. See `x0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    da?: number;
    /**
     * Sets the y coordinates.
     * Plotly @type: data_array
     */
    b?: any[];
    /**
     * Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
     * @default: "0"
     * Plotly @type: any
     */
    b0?: any;
    /**
     * Sets the y coordinate step. See `y0` for more info.
     * @default: "1"
     * Plotly @type: number
     */
    db?: number;
    /**
     * Sets the text elements associated with each z value.
     * Plotly @type: data_array
     */
    text?: any[];
    /**
     * Transposes the z data.
     * @default: "false"
     * Plotly @type: boolean
     */
    transpose?: boolean;
    /**
     * If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
     * Plotly @type: enumerated
     */
    atype?: "array"|"scaled";
    /**
     * If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
     * Plotly @type: enumerated
     */
    btype?: "array"|"scaled";
    /**
     * Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    /**
     * Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
     * @default: "true"
     * Plotly @type: boolean
     */
    autocontour?: boolean;
    /**
     * Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
     * @default: "15"
     * Plotly @type: integer
     */
    ncontours?: number;
    contours?: {
      /**
       * If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.
       * @default: "levels"
       * Plotly @type: enumerated
       */
      type?: "levels"|"constraint",
      /**
       * Sets the starting contour level value. Must be less than `contours.end`
       * Plotly @type: number
       */
      start?: number,
      /**
       * Sets the end contour level value. Must be more than `contours.start`
       * Plotly @type: number
       */
      end?: number,
      /**
       * Sets the step between each contour level. Must be positive.
       * Plotly @type: number
       */
      size?: number,
      /**
       * Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.
       * @default: "fill"
       * Plotly @type: enumerated
       */
      coloring?: "fill"|"lines"|"none",
      /**
       * Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.
       * @default: "true"
       * Plotly @type: boolean
       */
      showlines?: boolean,
      /**
       * Determines whether to label the contour lines with their values.
       * @default: "false"
       * Plotly @type: boolean
       */
      showlabels?: boolean,
      /**
       * Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.
       */
      labelfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the contour label formatting rule using d3 formatting mini-language which is very similar to Python, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format.
       * Plotly @type: string
       */
      labelformat?: string,
      /**
       * Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.
       * @default: "="
       * Plotly @type: enumerated
       */
      operation?: "="|"<"|">="|">"|"<="|"[]"|"()"|"[)"|"(]"|"]["|")("|"]("|")[",
      /**
       * Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.
       * @default: "0"
       * Plotly @type: any
       */
      value?: any,
      impliedEdits?: {
      },
    };
    line?: {
      /**
       * Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
      /**
       * Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
    };
    /**
     * Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
     * @default: "true"
     * Plotly @type: boolean
     */
    zauto?: boolean;
    /**
     * Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
     * Plotly @type: number
     */
    zmin?: number;
    /**
     * Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
     * Plotly @type: number
     */
    zmax?: number;
    /**
     * Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
     * Plotly @type: colorscale
     */
    colorscale?: string|any[];
    /**
     * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
     * @default: "false"
     * Plotly @type: boolean
     */
    autocolorscale?: boolean;
    /**
     * Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
     * @default: "false"
     * Plotly @type: boolean
     */
    reversescale?: boolean;
    /**
     * Determines whether or not a colorbar is displayed for this trace.
     * @default: "true"
     * Plotly @type: boolean
     */
    showscale?: boolean;
    colorbar?: {
      /**
       * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
       * @default: "pixels"
       * Plotly @type: enumerated
       */
      thicknessmode?: "fraction"|"pixels",
      /**
       * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
       * @default: "30"
       * Plotly @type: number
       */
      thickness?: number,
      /**
       * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
       * @default: "fraction"
       * Plotly @type: enumerated
       */
      lenmode?: "fraction"|"pixels",
      /**
       * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
       * @default: "1"
       * Plotly @type: number
       */
      len?: number,
      /**
       * Sets the x position of the color bar (in plot fraction).
       * @default: "1.02"
       * Plotly @type: number
       */
      x?: number,
      /**
       * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
       * @default: "left"
       * Plotly @type: enumerated
       */
      xanchor?: "left"|"center"|"right",
      /**
       * Sets the amount of padding (in px) along the x direction.
       * @default: "10"
       * Plotly @type: number
       */
      xpad?: number,
      /**
       * Sets the y position of the color bar (in plot fraction).
       * @default: "0.5"
       * Plotly @type: number
       */
      y?: number,
      /**
       * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
       * @default: "middle"
       * Plotly @type: enumerated
       */
      yanchor?: "top"|"middle"|"bottom",
      /**
       * Sets the amount of padding (in px) along the y direction.
       * @default: "10"
       * Plotly @type: number
       */
      ypad?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      outlinecolor?: string,
      /**
       * Sets the width (in px) of the axis line.
       * @default: "1"
       * Plotly @type: number
       */
      outlinewidth?: number,
      /**
       * Sets the axis line color.
       * @default: "#444"
       * Plotly @type: color
       */
      bordercolor?: string,
      /**
       * Sets the width (in px) or the border enclosing this color bar.
       * @default: "0"
       * Plotly @type: number
       */
      borderwidth?: number,
      /**
       * Sets the color of padded area.
       * @default: "rgba(0,0,0,0)"
       * Plotly @type: color
       */
      bgcolor?: string,
      /**
       * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
       * Plotly @type: enumerated
       */
      tickmode?: "auto"|"linear"|"array",
      /**
       * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
       * @default: "0"
       * Plotly @type: integer
       */
      nticks?: number,
      /**
       * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
       * Plotly @type: any
       */
      tick0?: any,
      /**
       * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
       * Plotly @type: any
       */
      dtick?: any,
      /**
       * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
       * Plotly @type: data_array
       */
      tickvals?: any[],
      /**
       * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
       * Plotly @type: data_array
       */
      ticktext?: any[],
      /**
       * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
       * Plotly @type: enumerated
       */
      ticks?: "outside"|"inside"|"",
      /**
       * Sets the tick length (in px).
       * @default: "5"
       * Plotly @type: number
       */
      ticklen?: number,
      /**
       * Sets the tick width (in px).
       * @default: "1"
       * Plotly @type: number
       */
      tickwidth?: number,
      /**
       * Sets the tick color.
       * @default: "#444"
       * Plotly @type: color
       */
      tickcolor?: string,
      /**
       * Determines whether or not the tick labels are drawn.
       * @default: "true"
       * Plotly @type: boolean
       */
      showticklabels?: boolean,
      /**
       * Sets the color bar's tick label font
       */
      tickfont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
       * @default: "auto"
       * Plotly @type: angle
       */
      tickangle?: number,
      /**
       * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
       * Plotly @type: string
       */
      tickformat?: string,
      tickformatstops?: {
        /**
         * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
         * @default: "true"
         * Plotly @type: boolean
         */
        enabled?: boolean,
        /**
         * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
         * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
         */
        dtickrange?: [any, any],
        /**
         * string - dtickformat for described zoom level, the same as *tickformat*
         * Plotly @type: string
         */
        value?: string,
        /**
         * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
         * Plotly @type: string
         */
        name?: string,
        /**
         * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
         * Plotly @type: string
         */
        templateitemname?: string,
      }[],
      /**
       * Sets a tick label prefix.
       * Plotly @type: string
       */
      tickprefix?: string,
      /**
       * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showtickprefix?: "all"|"first"|"last"|"none",
      /**
       * Sets a tick label suffix.
       * Plotly @type: string
       */
      ticksuffix?: string,
      /**
       * Same as `showtickprefix` but for tick suffixes.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showticksuffix?: "all"|"first"|"last"|"none",
      /**
       * If "true", even 4-digit integers are separated
       * @default: "false"
       * Plotly @type: boolean
       */
      separatethousands?: boolean,
      /**
       * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
       * @default: "B"
       * Plotly @type: enumerated
       */
      exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
      /**
       * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
       * @default: "all"
       * Plotly @type: enumerated
       */
      showexponent?: "all"|"first"|"last"|"none",
      /**
       * Sets the title of the color bar.
       * Plotly @type: string
       */
      title?: string,
      /**
       * Sets this color bar's title font.
       */
      titlefont?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string,
        /**
         * Plotly @type: number
         */
        size?: number,
        /**
         * Plotly @type: color
         */
        color?: string,
      },
      /**
       * Determines the location of the colorbar title with respect to the color bar.
       * @default: "top"
       * Plotly @type: enumerated
       */
      titleside?: "right"|"top"|"bottom",
      /**
       * Sets the source reference on plot.ly for  tickvals .
       * Plotly @type: string
       */
      tickvalssrc?: string,
      /**
       * Sets the source reference on plot.ly for  ticktext .
       * Plotly @type: string
       */
      ticktextsrc?: string,
    };
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  z .
     * Plotly @type: string
     */
    zsrc?: string;
    /**
     * Sets the source reference on plot.ly for  a .
     * Plotly @type: string
     */
    asrc?: string;
    /**
     * Sets the source reference on plot.ly for  b .
     * Plotly @type: string
     */
    bsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * ohlc: The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red.
   */
  export interface OHLC extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates. If absent, linear coordinate will be generated.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the open values.
     * Plotly @type: data_array
     */
    open?: any[];
    /**
     * Sets the high values.
     * Plotly @type: data_array
     */
    high?: any[];
    /**
     * Sets the low values.
     * Plotly @type: data_array
     */
    low?: any[];
    /**
     * Sets the close values.
     * Plotly @type: data_array
     */
    close?: any[];
    line?: {
      /**
       * [object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*). Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
    };
    increasing?: {
      line?: {
        /**
         * Sets the line color.
         * @default: "#3D9970"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the line width (in px).
         * @default: "2"
         * Plotly @type: number
         */
        width?: number,
        /**
         * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
         * @default: "solid"
         * Plotly @type: string
         */
        dash?: string,
      },
    };
    decreasing?: {
      line?: {
        /**
         * Sets the line color.
         * @default: "#FF4136"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the line width (in px).
         * @default: "2"
         * Plotly @type: number
         */
        width?: number,
        /**
         * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
         * @default: "solid"
         * Plotly @type: string
         */
        dash?: string,
      },
    };
    /**
     * Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets the width of the open/close tick marks relative to the *x* minimal interval.
     * @default: "0.3"
     * Plotly @type: number
     */
    tickwidth?: number;
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  open .
     * Plotly @type: string
     */
    opensrc?: string;
    /**
     * Sets the source reference on plot.ly for  high .
     * Plotly @type: string
     */
    highsrc?: string;
    /**
     * Sets the source reference on plot.ly for  low .
     * Plotly @type: string
     */
    lowsrc?: string;
    /**
     * Sets the source reference on plot.ly for  close .
     * Plotly @type: string
     */
    closesrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * candlestick: The candlestick is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The boxes represent the spread between the `open` and `close` values and the lines represent the spread between the `low` and `high` values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red.
   */
  export interface Candlestick extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the x coordinates. If absent, linear coordinate will be generated.
     * Plotly @type: data_array
     */
    x?: any[];
    /**
     * Sets the open values.
     * Plotly @type: data_array
     */
    open?: any[];
    /**
     * Sets the high values.
     * Plotly @type: data_array
     */
    high?: any[];
    /**
     * Sets the low values.
     * Plotly @type: data_array
     */
    low?: any[];
    /**
     * Sets the close values.
     * Plotly @type: data_array
     */
    close?: any[];
    line?: {
      /**
       * Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
    };
    increasing?: {
      line?: {
        /**
         * Sets the color of line bounding the box(es).
         * @default: "#3D9970"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the width (in px) of line bounding the box(es).
         * @default: "2"
         * Plotly @type: number
         */
        width?: number,
      },
      /**
       * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
       * Plotly @type: color
       */
      fillcolor?: string,
    };
    decreasing?: {
      line?: {
        /**
         * Sets the color of line bounding the box(es).
         * @default: "#FF4136"
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the width (in px) of line bounding the box(es).
         * @default: "2"
         * Plotly @type: number
         */
        width?: number,
      },
      /**
       * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
       * Plotly @type: color
       */
      fillcolor?: string,
    };
    /**
     * Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).
     * @default: "0"
     * Plotly @type: number
     */
    whiskerwidth?: number;
    /**
     * Sets the calendar system to use with `x` date data.
     * @default: "gregorian"
     * Plotly @type: enumerated
     */
    xcalendar?: "gregorian"|"chinese"|"coptic"|"discworld"|"ethiopian"|"hebrew"|"islamic"|"julian"|"mayan"|"nanakshahi"|"nepali"|"persian"|"jalali"|"taiwan"|"thai"|"ummalqura";
    /**
     * Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
     * @default: "x"
     * Plotly @type: subplotid
     */
    xaxis?: string;
    /**
     * Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
     * @default: "y"
     * Plotly @type: subplotid
     */
    yaxis?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  x .
     * Plotly @type: string
     */
    xsrc?: string;
    /**
     * Sets the source reference on plot.ly for  open .
     * Plotly @type: string
     */
    opensrc?: string;
    /**
     * Sets the source reference on plot.ly for  high .
     * Plotly @type: string
     */
    highsrc?: string;
    /**
     * Sets the source reference on plot.ly for  low .
     * Plotly @type: string
     */
    lowsrc?: string;
    /**
     * Sets the source reference on plot.ly for  close .
     * Plotly @type: string
     */
    closesrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * scatterpolar: The scatterpolar trace type encompasses line charts, scatter charts, text charts, and bubble charts in polar coordinates. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays.
   */
  export interface ScatterPolar extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "r"|"theta"|"text"|"name"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    /**
     * Sets the radial coordinates
     * Plotly @type: data_array
     */
    r?: any[];
    /**
     * Sets the angular coordinates
     * Plotly @type: data_array
     */
    theta?: any[];
    /**
     * Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.
     * @default: "0"
     * Plotly @type: any
     */
    r0?: any;
    /**
     * Sets the r coordinate step.
     * @default: "1"
     * Plotly @type: number
     */
    dr?: number;
    /**
     * Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.
     * @default: "0"
     * Plotly @type: any
     */
    theta0?: any;
    /**
     * Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.
     * Plotly @type: number
     */
    dtheta?: number;
    /**
     * Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
     * @default: "degrees"
     * Plotly @type: enumerated
     */
    thetaunit?: "radians"|"degrees"|"gradians";
    /**
     * Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    line?: {
      /**
       * Sets the line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
       * @default: "solid"
       * Plotly @type: string
       */
      dash?: string,
      /**
       * Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
       * @default: "linear"
       * Plotly @type: enumerated
       */
      shape?: "linear"|"spline",
      /**
       * Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
       * @default: "1"
       * Plotly @type: number
       */
      smoothing?: number,
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    marker?: {
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
       * @default: "0"
       * Plotly @type: number
       */
      maxdisplayed?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      gradient?: {
        /**
         * Sets the type of gradient used to fill the markers
         * @default: "none"
         * Plotly @type: enumerated
         */
        type?: "radial"|"horizontal"|"vertical"|"none"|string|string[],
        /**
         * Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  type .
         * Plotly @type: string
         */
        typesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
     * @default: "false"
     * Plotly @type: boolean
     */
    cliponaxis?: boolean;
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "middle center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right"|string|string[];
    /**
     * Sets the text font.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    /**
     * Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterpolar has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
     * @default: "none"
     * Plotly @type: enumerated
     */
    fill?: "none"|"toself"|"tonext";
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    /**
     * Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
     * Plotly @type: flaglist
     */
    hoveron?: "points"|"fills";
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    /**
     * Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
     * @default: "polar"
     * Plotly @type: subplotid
     */
    subplot?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  r .
     * Plotly @type: string
     */
    rsrc?: string;
    /**
     * Sets the source reference on plot.ly for  theta .
     * Plotly @type: string
     */
    thetasrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;

  }
  /**
   * scatterpolargl: The scatterpolargl trace type encompasses line charts, scatter charts, and bubble charts in polar coordinates using the WebGL plotting engine. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays.
   */
  export interface ScatterPolarGL extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "r"|"theta"|"text"|"name"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
     * Plotly @type: flaglist
     */
    mode?: "lines"|"markers"|"text"|"none";
    /**
     * Sets the radial coordinates
     * Plotly @type: data_array
     */
    r?: any[];
    /**
     * Sets the angular coordinates
     * Plotly @type: data_array
     */
    theta?: any[];
    /**
     * Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.
     * @default: "0"
     * Plotly @type: any
     */
    r0?: any;
    /**
     * Sets the r coordinate step.
     * @default: "1"
     * Plotly @type: number
     */
    dr?: number;
    /**
     * Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.
     * @default: "0"
     * Plotly @type: any
     */
    theta0?: any;
    /**
     * Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.
     * Plotly @type: number
     */
    dtheta?: number;
    /**
     * Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
     * @default: "degrees"
     * Plotly @type: enumerated
     */
    thetaunit?: "radians"|"degrees"|"gradians";
    /**
     * Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
     * Plotly @type: string
     */
    text?: string|string[];
    /**
     * Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
     * Plotly @type: string
     */
    hovertext?: string|string[];
    line?: {
      /**
       * Sets the line color.
       * Plotly @type: color
       */
      color?: string,
      /**
       * Sets the line width (in px).
       * @default: "2"
       * Plotly @type: number
       */
      width?: number,
      /**
       * Sets the style of the lines.
       * @default: "solid"
       * Plotly @type: enumerated
       */
      dash?: "solid"|"dot"|"dash"|"longdash"|"dashdot"|"longdashdot",
    };
    /**
     * Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
     * @default: "false"
     * Plotly @type: boolean
     */
    connectgaps?: boolean;
    marker?: {
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
       * @default: "1"
       * Plotly @type: number
       */
      sizeref?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
       * @default: "0"
       * Plotly @type: number
       */
      sizemin?: number,
      /**
       * Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
       * @default: "diameter"
       * Plotly @type: enumerated
       */
      sizemode?: "diameter"|"area",
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:calc], [valType:any, editType:calc]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      line?: {
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
      },
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
    };
    /**
     * Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
     * @default: "none"
     * Plotly @type: enumerated
     */
    fill?: "none"|"tozeroy"|"tozerox"|"tonexty"|"tonextx"|"toself"|"tonext";
    /**
     * Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
     * Plotly @type: color
     */
    fillcolor?: string;
    /**
     * Sets the positions of the `text` elements with respects to the (x,y) coordinates.
     * @default: "middle center"
     * Plotly @type: enumerated
     */
    textposition?: "top left"|"top center"|"top right"|"middle left"|"middle center"|"middle right"|"bottom left"|"bottom center"|"bottom right"|string|string[];
    /**
     * Sets the text font.
     */
    textfont?: {
      /**
       * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
       * Plotly @type: string
       */
      family?: string|string[],
      /**
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the source reference on plot.ly for  family .
       * Plotly @type: string
       */
      familysrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
    };
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of selected points.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
        /**
         * Sets the marker size of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        size?: number,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    /**
     * Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
     * @default: "polar"
     * Plotly @type: subplotid
     */
    subplot?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  r .
     * Plotly @type: string
     */
    rsrc?: string;
    /**
     * Sets the source reference on plot.ly for  theta .
     * Plotly @type: string
     */
    thetasrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;
    /**
     * Sets the source reference on plot.ly for  hovertext .
     * Plotly @type: string
     */
    hovertextsrc?: string;
    /**
     * Sets the source reference on plot.ly for  textposition .
     * Plotly @type: string
     */
    textpositionsrc?: string;

  }
  /**
   * barpolar: The data visualized by the radial span of the bars is set in `r`
   */
  export interface BarPolar extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "r"|"theta"|"text"|"name"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * Sets the radial coordinates
     * Plotly @type: data_array
     */
    r?: any[];
    /**
     * Sets the angular coordinates
     * Plotly @type: data_array
     */
    theta?: any[];
    /**
     * Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.
     * @default: "0"
     * Plotly @type: any
     */
    r0?: any;
    /**
     * Sets the r coordinate step.
     * @default: "1"
     * Plotly @type: number
     */
    dr?: number;
    /**
     * Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.
     * @default: "0"
     * Plotly @type: any
     */
    theta0?: any;
    /**
     * Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.
     * Plotly @type: number
     */
    dtheta?: number;
    /**
     * Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
     * @default: "degrees"
     * Plotly @type: enumerated
     */
    thetaunit?: "radians"|"degrees"|"gradians";
    /**
     * Sets where the bar base is drawn (in radial axis units). In *stack* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.
     * Plotly @type: any
     */
    base?: any;
    /**
     * Shifts the angular position where the bar is drawn (in *thetatunit* units).
     * Plotly @type: number
     */
    offset?: number|number[];
    /**
     * Sets the bar angular width (in *thetaunit* units).
     * Plotly @type: number
     */
    width?: number|number[];
    /**
     * Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.
     * Plotly @type: string
     */
    text?: string|string[];
    marker?: {
      line?: {
        /**
         * Sets the width (in px) of the lines bounding the marker points.
         * @default: "0"
         * Plotly @type: number
         */
        width?: number|number[],
        /**
         * Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
         * @default: "true"
         * Plotly @type: boolean
         */
        cauto?: boolean,
        /**
         * Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
         * Plotly @type: number
         */
        cmin?: number,
        /**
         * Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
         * Plotly @type: number
         */
        cmax?: number,
        /**
         * Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
         * Plotly @type: colorscale
         */
        colorscale?: string|any[],
        /**
         * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
         * @default: "true"
         * Plotly @type: boolean
         */
        autocolorscale?: boolean,
        /**
         * Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
         * @default: "false"
         * Plotly @type: boolean
         */
        reversescale?: boolean,
        /**
         * Sets the source reference on plot.ly for  width .
         * Plotly @type: string
         */
        widthsrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
       * @default: "true"
       * Plotly @type: boolean
       */
      cauto?: boolean,
      /**
       * Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
       * Plotly @type: number
       */
      cmin?: number,
      /**
       * Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
       * Plotly @type: number
       */
      cmax?: number,
      /**
       * Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
       * Plotly @type: colorscale
       */
      colorscale?: string|any[],
      /**
       * Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
       * @default: "true"
       * Plotly @type: boolean
       */
      autocolorscale?: boolean,
      /**
       * Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
       * @default: "false"
       * Plotly @type: boolean
       */
      reversescale?: boolean,
      /**
       * Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
       * @default: "false"
       * Plotly @type: boolean
       */
      showscale?: boolean,
      colorbar?: {
        /**
         * Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
         * @default: "pixels"
         * Plotly @type: enumerated
         */
        thicknessmode?: "fraction"|"pixels",
        /**
         * Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
         * @default: "30"
         * Plotly @type: number
         */
        thickness?: number,
        /**
         * Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
         * @default: "fraction"
         * Plotly @type: enumerated
         */
        lenmode?: "fraction"|"pixels",
        /**
         * Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
         * @default: "1"
         * Plotly @type: number
         */
        len?: number,
        /**
         * Sets the x position of the color bar (in plot fraction).
         * @default: "1.02"
         * Plotly @type: number
         */
        x?: number,
        /**
         * Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
         * @default: "left"
         * Plotly @type: enumerated
         */
        xanchor?: "left"|"center"|"right",
        /**
         * Sets the amount of padding (in px) along the x direction.
         * @default: "10"
         * Plotly @type: number
         */
        xpad?: number,
        /**
         * Sets the y position of the color bar (in plot fraction).
         * @default: "0.5"
         * Plotly @type: number
         */
        y?: number,
        /**
         * Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
         * @default: "middle"
         * Plotly @type: enumerated
         */
        yanchor?: "top"|"middle"|"bottom",
        /**
         * Sets the amount of padding (in px) along the y direction.
         * @default: "10"
         * Plotly @type: number
         */
        ypad?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        outlinecolor?: string,
        /**
         * Sets the width (in px) of the axis line.
         * @default: "1"
         * Plotly @type: number
         */
        outlinewidth?: number,
        /**
         * Sets the axis line color.
         * @default: "#444"
         * Plotly @type: color
         */
        bordercolor?: string,
        /**
         * Sets the width (in px) or the border enclosing this color bar.
         * @default: "0"
         * Plotly @type: number
         */
        borderwidth?: number,
        /**
         * Sets the color of padded area.
         * @default: "rgba(0,0,0,0)"
         * Plotly @type: color
         */
        bgcolor?: string,
        /**
         * Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
         * Plotly @type: enumerated
         */
        tickmode?: "auto"|"linear"|"array",
        /**
         * Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
         * @default: "0"
         * Plotly @type: integer
         */
        nticks?: number,
        /**
         * Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
         * Plotly @type: any
         */
        tick0?: any,
        /**
         * Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
         * Plotly @type: any
         */
        dtick?: any,
        /**
         * Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
         * Plotly @type: data_array
         */
        tickvals?: any[],
        /**
         * Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
         * Plotly @type: data_array
         */
        ticktext?: any[],
        /**
         * Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
         * Plotly @type: enumerated
         */
        ticks?: "outside"|"inside"|"",
        /**
         * Sets the tick length (in px).
         * @default: "5"
         * Plotly @type: number
         */
        ticklen?: number,
        /**
         * Sets the tick width (in px).
         * @default: "1"
         * Plotly @type: number
         */
        tickwidth?: number,
        /**
         * Sets the tick color.
         * @default: "#444"
         * Plotly @type: color
         */
        tickcolor?: string,
        /**
         * Determines whether or not the tick labels are drawn.
         * @default: "true"
         * Plotly @type: boolean
         */
        showticklabels?: boolean,
        /**
         * Sets the color bar's tick label font
         */
        tickfont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
         * @default: "auto"
         * Plotly @type: angle
         */
        tickangle?: number,
        /**
         * Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
         * Plotly @type: string
         */
        tickformat?: string,
        tickformatstops?: {
          /**
           * Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
           * @default: "true"
           * Plotly @type: boolean
           */
          enabled?: boolean,
          /**
           * range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
           * Plotly @type: info_array ([[valType:any, editType:colorbars], [valType:any, editType:colorbars]])
           */
          dtickrange?: [any, any],
          /**
           * string - dtickformat for described zoom level, the same as *tickformat*
           * Plotly @type: string
           */
          value?: string,
          /**
           * When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
           * Plotly @type: string
           */
          name?: string,
          /**
           * Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
           * Plotly @type: string
           */
          templateitemname?: string,
        }[],
        /**
         * Sets a tick label prefix.
         * Plotly @type: string
         */
        tickprefix?: string,
        /**
         * If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showtickprefix?: "all"|"first"|"last"|"none",
        /**
         * Sets a tick label suffix.
         * Plotly @type: string
         */
        ticksuffix?: string,
        /**
         * Same as `showtickprefix` but for tick suffixes.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showticksuffix?: "all"|"first"|"last"|"none",
        /**
         * If "true", even 4-digit integers are separated
         * @default: "false"
         * Plotly @type: boolean
         */
        separatethousands?: boolean,
        /**
         * Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
         * @default: "B"
         * Plotly @type: enumerated
         */
        exponentformat?: "none"|"e"|"E"|"power"|"SI"|"B",
        /**
         * If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
         * @default: "all"
         * Plotly @type: enumerated
         */
        showexponent?: "all"|"first"|"last"|"none",
        /**
         * Sets the title of the color bar.
         * Plotly @type: string
         */
        title?: string,
        /**
         * Sets this color bar's title font.
         */
        titlefont?: {
          /**
           * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
           * Plotly @type: string
           */
          family?: string,
          /**
           * Plotly @type: number
           */
          size?: number,
          /**
           * Plotly @type: color
           */
          color?: string,
        },
        /**
         * Determines the location of the colorbar title with respect to the color bar.
         * @default: "top"
         * Plotly @type: enumerated
         */
        titleside?: "right"|"top"|"bottom",
        /**
         * Sets the source reference on plot.ly for  tickvals .
         * Plotly @type: string
         */
        tickvalssrc?: string,
        /**
         * Sets the source reference on plot.ly for  ticktext .
         * Plotly @type: string
         */
        ticktextsrc?: string,
      },
      /**
       * Sets the opacity of the bars.
       * @default: "1"
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
    };
    selected?: {
      marker?: {
        /**
         * Sets the marker opacity of selected points.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
      textfont?: {
        /**
         * Sets the text font color of selected points.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    unselected?: {
      marker?: {
        /**
         * Sets the marker opacity of unselected points, applied only when a selection exists.
         * Plotly @type: number
         */
        opacity?: number,
        /**
         * Sets the marker color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
      textfont?: {
        /**
         * Sets the text font color of unselected points, applied only when a selection exists.
         * Plotly @type: color
         */
        color?: string,
      },
    };
    /**
     * Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
     * @default: "polar"
     * Plotly @type: subplotid
     */
    subplot?: string;
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  r .
     * Plotly @type: string
     */
    rsrc?: string;
    /**
     * Sets the source reference on plot.ly for  theta .
     * Plotly @type: string
     */
    thetasrc?: string;
    /**
     * Sets the source reference on plot.ly for  base .
     * Plotly @type: string
     */
    basesrc?: string;
    /**
     * Sets the source reference on plot.ly for  offset .
     * Plotly @type: string
     */
    offsetsrc?: string;
    /**
     * Sets the source reference on plot.ly for  width .
     * Plotly @type: string
     */
    widthsrc?: string;
    /**
     * Sets the source reference on plot.ly for  text .
     * Plotly @type: string
     */
    textsrc?: string;

  }
  /**
   * area
   */
  export interface Area extends BaseTrace {
    /**
     * Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
     * @default: "true"
     * Plotly @type: enumerated
     */
    visible?: true|false|"legendonly";
    /**
     * Determines whether or not an item corresponding to this trace is shown in the legend.
     * @default: "true"
     * Plotly @type: boolean
     */
    showlegend?: boolean;
    /**
     * Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
     * Plotly @type: string
     */
    legendgroup?: string;
    /**
     * Sets the opacity of the trace.
     * @default: "1"
     * Plotly @type: number
     */
    opacity?: number;
    /**
     * Sets the trace name. The trace name appear as the legend item and on hover.
     * Plotly @type: string
     */
    name?: string;
    /**
     * Plotly @type: string
     */
    uid?: string;
    /**
     * Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
     * Plotly @type: data_array
     */
    ids?: any[];
    /**
     * Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
     * Plotly @type: data_array
     */
    customdata?: any[];
    /**
     * Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
     * Plotly @type: any
     */
    selectedpoints?: any;
    /**
     * Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
     * @default: "all"
     * Plotly @type: flaglist
     */
    hoverinfo?: "x"|"y"|"z"|"text"|"name"|"all"|"none"|"skip";
    hoverlabel?: {
      /**
       * Sets the background color of the hover labels for this trace
       * Plotly @type: color
       */
      bgcolor?: string|string[],
      /**
       * Sets the border color of the hover labels for this trace.
       * Plotly @type: color
       */
      bordercolor?: string|string[],
      /**
       * Sets the font used in hover labels.
       */
      font?: {
        /**
         * HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
         * Plotly @type: string
         */
        family?: string|string[],
        /**
         * Plotly @type: number
         */
        size?: number|number[],
        /**
         * Plotly @type: color
         */
        color?: string|string[],
        /**
         * Sets the source reference on plot.ly for  family .
         * Plotly @type: string
         */
        familysrc?: string,
        /**
         * Sets the source reference on plot.ly for  size .
         * Plotly @type: string
         */
        sizesrc?: string,
        /**
         * Sets the source reference on plot.ly for  color .
         * Plotly @type: string
         */
        colorsrc?: string,
      },
      /**
       * Sets the length (in number of characters) of the trace name in the hover labels for this trace. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
       * Plotly @type: integer
       */
      namelength?: number|number[],
      /**
       * Sets the source reference on plot.ly for  bgcolor .
       * Plotly @type: string
       */
      bgcolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  bordercolor .
       * Plotly @type: string
       */
      bordercolorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  namelength .
       * Plotly @type: string
       */
      namelengthsrc?: string,
    };
    stream?: {
      /**
       * The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.
       * Plotly @type: string
       */
      token?: string,
      /**
       * Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
       * @default: "500"
       * Plotly @type: number
       */
      maxpoints?: number,
    };
    transforms?: {
    }[];
    /**
     * For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the radial coordinates.
     * Plotly @type: data_array
     */
    r?: any[];
    /**
     * For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the angular coordinates.
     * Plotly @type: data_array
     */
    t?: any[];
    marker?: {
      /**
       * Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
       * Plotly @type: color
       */
      color?: string|string[],
      /**
       * Sets the marker size (in px).
       * @default: "6"
       * Plotly @type: number
       */
      size?: number|number[],
      /**
       * Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
       * @default: "circle"
       * Plotly @type: enumerated
       */
      symbol?: 0|"circle"|100|"circle-open"|200|"circle-dot"|300|"circle-open-dot"|1|"square"|101|"square-open"|201|"square-dot"|301|"square-open-dot"|2|"diamond"|102|"diamond-open"|202|"diamond-dot"|302|"diamond-open-dot"|3|"cross"|103|"cross-open"|203|"cross-dot"|303|"cross-open-dot"|4|"x"|104|"x-open"|204|"x-dot"|304|"x-open-dot"|5|"triangle-up"|105|"triangle-up-open"|205|"triangle-up-dot"|305|"triangle-up-open-dot"|6|"triangle-down"|106|"triangle-down-open"|206|"triangle-down-dot"|306|"triangle-down-open-dot"|7|"triangle-left"|107|"triangle-left-open"|207|"triangle-left-dot"|307|"triangle-left-open-dot"|8|"triangle-right"|108|"triangle-right-open"|208|"triangle-right-dot"|308|"triangle-right-open-dot"|9|"triangle-ne"|109|"triangle-ne-open"|209|"triangle-ne-dot"|309|"triangle-ne-open-dot"|10|"triangle-se"|110|"triangle-se-open"|210|"triangle-se-dot"|310|"triangle-se-open-dot"|11|"triangle-sw"|111|"triangle-sw-open"|211|"triangle-sw-dot"|311|"triangle-sw-open-dot"|12|"triangle-nw"|112|"triangle-nw-open"|212|"triangle-nw-dot"|312|"triangle-nw-open-dot"|13|"pentagon"|113|"pentagon-open"|213|"pentagon-dot"|313|"pentagon-open-dot"|14|"hexagon"|114|"hexagon-open"|214|"hexagon-dot"|314|"hexagon-open-dot"|15|"hexagon2"|115|"hexagon2-open"|215|"hexagon2-dot"|315|"hexagon2-open-dot"|16|"octagon"|116|"octagon-open"|216|"octagon-dot"|316|"octagon-open-dot"|17|"star"|117|"star-open"|217|"star-dot"|317|"star-open-dot"|18|"hexagram"|118|"hexagram-open"|218|"hexagram-dot"|318|"hexagram-open-dot"|19|"star-triangle-up"|119|"star-triangle-up-open"|219|"star-triangle-up-dot"|319|"star-triangle-up-open-dot"|20|"star-triangle-down"|120|"star-triangle-down-open"|220|"star-triangle-down-dot"|320|"star-triangle-down-open-dot"|21|"star-square"|121|"star-square-open"|221|"star-square-dot"|321|"star-square-open-dot"|22|"star-diamond"|122|"star-diamond-open"|222|"star-diamond-dot"|322|"star-diamond-open-dot"|23|"diamond-tall"|123|"diamond-tall-open"|223|"diamond-tall-dot"|323|"diamond-tall-open-dot"|24|"diamond-wide"|124|"diamond-wide-open"|224|"diamond-wide-dot"|324|"diamond-wide-open-dot"|25|"hourglass"|125|"hourglass-open"|26|"bowtie"|126|"bowtie-open"|27|"circle-cross"|127|"circle-cross-open"|28|"circle-x"|128|"circle-x-open"|29|"square-cross"|129|"square-cross-open"|30|"square-x"|130|"square-x-open"|31|"diamond-cross"|131|"diamond-cross-open"|32|"diamond-x"|132|"diamond-x-open"|33|"cross-thin"|133|"cross-thin-open"|34|"x-thin"|134|"x-thin-open"|35|"asterisk"|135|"asterisk-open"|36|"hash"|136|"hash-open"|236|"hash-dot"|336|"hash-open-dot"|37|"y-up"|137|"y-up-open"|38|"y-down"|138|"y-down-open"|39|"y-left"|139|"y-left-open"|40|"y-right"|140|"y-right-open"|41|"line-ew"|141|"line-ew-open"|42|"line-ns"|142|"line-ns-open"|43|"line-ne"|143|"line-ne-open"|44|"line-nw"|144|"line-nw-open"|string|string[],
      /**
       * Sets the marker opacity.
       * Plotly @type: number
       */
      opacity?: number|number[],
      /**
       * Sets the source reference on plot.ly for  color .
       * Plotly @type: string
       */
      colorsrc?: string,
      /**
       * Sets the source reference on plot.ly for  size .
       * Plotly @type: string
       */
      sizesrc?: string,
      /**
       * Sets the source reference on plot.ly for  symbol .
       * Plotly @type: string
       */
      symbolsrc?: string,
      /**
       * Sets the source reference on plot.ly for  opacity .
       * Plotly @type: string
       */
      opacitysrc?: string,
    };
    /**
     * Sets the source reference on plot.ly for  ids .
     * Plotly @type: string
     */
    idssrc?: string;
    /**
     * Sets the source reference on plot.ly for  customdata .
     * Plotly @type: string
     */
    customdatasrc?: string;
    /**
     * Sets the source reference on plot.ly for  hoverinfo .
     * Plotly @type: string
     */
    hoverinfosrc?: string;
    /**
     * Sets the source reference on plot.ly for  r .
     * Plotly @type: string
     */
    rsrc?: string;
    /**
     * Sets the source reference on plot.ly for  t .
     * Plotly @type: string
     */
    tsrc?: string;

  }
}

declare module plotly {

  export type ReturnStringFunction = ( plotElement: PlotlyDiv ) => string;

  export interface PlotlyModeBarButton {
    // See Plotly /components/modebar/buttons.js for configs of built-in buttons.

    /**
     * name / id of the buttons (for tracking)
     */
    name?: string;

    /**
     * Text that appears while hovering over the button, enter null, false or '' for no hover text
     */
    title?: string | ReturnStringFunction;

    /**
     * SVG path associated with the button. Can be linked to Plotly.Icons to use the default plotly icons
     */
    icon?: { ascent?: number, descent?: number, path?: string, width?: number };

    /**
     * Icon positioning. No idea what this does. Plotly only sets this to "ne".
     */
    gravity?: string;

    /**
     * Click handler associated with the button
     * @param gd The main graph object
     * @param event
     */
    click?: ( gd?: any, event?: any ) => void;

    /**
     * Attribute associated with button, use this with 'val' to keep track of the state
     */
    attr?: string;

    /**
     * Initial 'attr' value, can be a function of gd
     */
    val?: string | ReturnStringFunction;

    /**
     * Is the button a toggle button?
     */
    toggle?: boolean;
  }

  /**
   * Plot config options
   */
  export interface PlotConfig {
    staticPlot?: boolean;
    editable?: boolean;
    edits?: {
      annotationPosition?: boolean,
      annotationTail?: boolean,
      annotationText?: boolean,
      axisTitleText?: boolean,
      colorbarPosition?: boolean,
      colorbarTitleText?: boolean,
      legendPosition?: boolean,
      legendText?: boolean,
      shapePosition?: boolean,
      titleText?: boolean
    };
    /**
     * Do autosize once regardless of layout.autosize
     */
    autosizable?: boolean;
    /**
     * Set the length of the undo/redo queue
     */
    queueLength?: number;
    /**
     * If we do autosize, do we fill the container or the screen?
     */
    fillFrame?: boolean;
    /**
     * If we do autosize, set the frame margins in percents of plot size
     */
    frameMargins?: boolean;
    /**
     * Mousewheel or two-finger scroll zooms the plot
     */
    scrollZoom?: boolean;
    /**
     * Double click interaction (false, 'reset', 'autosize' or 'reset+autosize')
     */
    doubleClick?: false|'reset'|'autosize'|'reset+autosize';
    /**
     * New users see some hints about interactivity
     */
    showTips?: boolean;
    /**
     * Enable axis pan/zoom drag handles
     */
    showAxisDragHandles?: boolean;
    /**
     * Enable direct range entry at the pan/zoom drag points. drag handles must be enabled
     */
    showAxisRangeEntryBoxes?: boolean;
    /**
     * Link to open this plot in plotly
     */
    showLink?: boolean;
    /**
     * If we show a link, does it contain data or just link to a plotly file?
     */
    sendData?: boolean;
    /**
     * Text appearing in the sendData link
     */
    linkText?: string;
    /**
     * false or function adding source(s) to linkText
     */
    showSources?: boolean;
    /**
     * Display the mode bar (true, false, or 'hover')
     */
    displayModeBar?: boolean|'hover';
    /**
     * Remove mode bar button by name
     */
    modeBarButtonsToRemove?: string[];
    /**
     * Add mode bar button using config objects
     */
    modeBarButtonsToAdd?: plotly.PlotlyModeBarButton[];
    /**
     * Fully custom mode bar buttons as nested array, where the outer arrays represents button groups,
     * and the inner arrays have buttons config objects or names of default buttons
     */
    modeBarButtons?: Array<(string|plotly.PlotlyModeBarButton)[]>;
    displaylogo?: boolean;
    /**
     * Increase the pixel ratio for Gl plot images
     */
    plotGlPixelRatio?: number;
    /**
     * Background setting function
     * 'transparent' sets the background `layout.paper_color`
     * 'opaque' blends bg color with white ensuring an opaque background
     */
    setBackground?: 'transparent'|'opaque';
    /**
     * URL to topojson files used in geo charts
     */
    topojsonURL?: string;
    /**
     * Mapbox access token (required to plot mapbox trace types). Set this option to ''
     * to prevent plotly.js from authenticating to the public Mapbox server.
     */
    mapboxAccessToken?: string;
    /**
     * Turn all console logging on or off (errors will be thrown)
     * This should ONLY be set via Plotly.setPlotConfig
     * 0: no logs
     * 1: warnings and errors, but not informational messages
     * 2: verbose logs
     */
    logging?: 0|1|2;
    /**
     * Set global transform to be applied to all traces with no specification needed
     */
    globalTransforms?: any[];
    /**
     * Should be a string like 'en' or 'en-US'.
     */
    locale?: string;
    /*
     * Localization definitions
     * Locales can be provided either here (specific to one chart) or globally
     * by registering them as modules.
     * Should be an object of objects {locale: {dictionary: {...}, format: {...}}}
     * {
     *     da: {
     *         dictionary: {'Reset axes': 'Nulstil aksler', ...},
     *         format: {months: [...], shortMonths: [...]}
     *     },
     *     ...
     * }
     * All parts are optional. When looking for translation or format fields, we
     * look first for an exact match in a config locale, then in a registered
     * module. If those fail, we strip off any regionalization ('en-US' -> 'en')
     * and try each (config, registry) again. The final fallback for translation
     * is untranslated (which is US English) and for formats is the base English
     * (the only consequence being the last fallback date format %x is DD/MM/YYYY
     * instead of MM/DD/YYYY). Currently `grouping` and `currency` are ignored
     * for our automatic number formatting, but can be used in custom formats.
     */
    locales?: boolean;
  }

  /**
   * Global Plotly object.
   */
  export interface Plotly {
    /**
     * Plotly.react:
     * A plot/update method that takes the full plot state (same API as plot/newPlot)
     * and diffs to determine the minimal update pathway.
     *
     * Diffing is done on fullData and fullLayout, not on data and layout, for a few reasons:
     *
     * We don't copy data and layout, so there's nothing to diff there if the user modifies them in place. But _full* get regenerated as
     * new objects with every supplyDefaults call (which must happen on every update regardless).
     * No need to worry about the data types we're diffing, as supplyDefaults cleans that up. Also we won't diff user attributes that
     * don't go into the plot, or irrelevant leftovers of old plot types.
     *
     * We do NOT dive into data arrays (valType: 'data_array' or arrayOk: true) in the diffing algorithm. There are two ways to tell
     * Plotly.react that the data have changed:
     *
     * layout.datarevision: can take any value - string, number, whatever - and if it is not === its previous value, we treat the data
     * as changed. Data arrays themselves are ignored during diffing. Note that right now there's no difference in the pathway we'd take
     * for one vs all data arrays changing, but in the future if we implement partial recalc we can make a similar flag for each array,
     * or perhaps each trace.
     *
     * If you omit datarevision, we assume data arrays are being used as immutable and compare them with === to determine if anything
     * changed. This has some known issues (resulting in slow recalc when it wouldn't be needed) that we should fix:
     * At least one trace type (surface) fills in index arrays for missing dimensions. These are never === each other. We should provide
     * these later in the pipeline, not attached to _fullData, or fill them in as _private attributes which do not get diffed.
     * At least one trace type (scatter) will slice uneven arrays to the same length, which will also make them compare unequal.
     * We should just record a private _length or something instead.
     *
     * @param {string id or DOM element} gd
     *      the id or DOM element of the graph container div
     * @param {array of objects} data
     *      array of traces, containing the data and display information for each trace
     * @param {object} layout
     *      object describing the overall display of the plot,
     *      all the stuff that doesn't pertain to any individual trace
     * @param {object} config
     *      configuration options (see ./plot_config.js for more info)
     *
     * OR
     *
     * @param {string id or DOM element} gd
     *      the id or DOM element of the graph container div
     * @param {object} figure
     *      object containing `data`, `layout`, `config`, and `frames` members
     *
     */
    react(gd: string|HTMLDivElement, data?: plotly.traces.BaseTrace[], layout?: plotly.layout.Layout, config?: plotly.PlotConfig): Promise<plotly.PlotlyDiv>;

    /**
     * Main plot-creation function
     *
     * @param {string id or DOM element} gd
     *    the id or DOM element of the graph container div
     * @param {array of objects} data
     *    array of traces, containing the data and display information for each trace
     * @param {object} layout
     *    object describing the overall display of the plot,
     *    all the stuff that doesn't pertain to any individual trace
     * @param {object} config
     *    configuration options (see ./plot_config.js for more info)
     *
     */
    plot(gd: string|HTMLDivElement, data: plotly.traces.BaseTrace[], layout?: plotly.layout.Layout, config?: plotly.PlotConfig): Promise<plotly.PlotlyDiv>;

    /**
     * Convenience function to force a full redraw.
     */
    redraw(gd: string|HTMLDivElement): Promise<plotly.PlotlyDiv>;

    /**
     * Convenience function to make idempotent plot option obvious to users.
     *
     * @param {string id or DOM element} gd
     *    the id or DOM element of the graph container div
     * @param {array of objects} data
     *    array of traces, containing the data and display information for each trace
     * @param {object} layout
     *    object describing the overall display of the plot,
     *    all the stuff that doesn't pertain to any individual trace
     * @param {object} config
     *    configuration options (see ./plot_config.js for more info)
     *
     */
    newPlot(gd: string|HTMLDivElement, data: plotly.traces.BaseTrace[], layout?: plotly.layout.Layout, config?: plotly.PlotConfig): Promise<plotly.PlotlyDiv>;

    /**
     * Extend && prepend traces at indices with update arrays, window trace lengths to maxPoints
     *
     * Extend and Prepend have identical APIs. Prepend inserts an array at the head while Extend
     * inserts an array off the tail. Prepend truncates the tail of the array - counting maxPoints
     * from the head, whereas Extend truncates the head of the array, counting backward maxPoints
     * from the tail.
     *
     * If maxPoints is undefined, nonNumeric, negative or greater than extended trace length no
     * truncation / windowing will be performed. If its zero, well the whole trace is truncated.
     *
     * @param {Object|HTMLDivElement} gd The graph div
     * @param {Object} update The key:array map of target attributes to extend
     * @param {Number|Number[]} indices The locations of traces to be extended
     * @param {Number|Object} [maxPoints] Number of points for trace window after lengthening.
     *
     */
    extendTraces(gd: any|HTMLDivElement, update: any, indices: number|number[], maxPoints: number|any): Promise<plotly.PlotlyDiv>;

    /**
     * Extend && prepend traces at indices with update arrays, window trace lengths to maxPoints
     *
     * Extend and Prepend have identical APIs. Prepend inserts an array at the head while Extend
     * inserts an array off the tail. Prepend truncates the tail of the array - counting maxPoints
     * from the head, whereas Extend truncates the head of the array, counting backward maxPoints
     * from the tail.
     *
     * If maxPoints is undefined, nonNumeric, negative or greater than extended trace length no
     * truncation / windowing will be performed. If its zero, well the whole trace is truncated.
     *
     * @param {Object|HTMLDivElement} gd The graph div
     * @param {Object} update The key:array map of target attributes to extend
     * @param {Number|Number[]} indices The locations of traces to be extended
     * @param {Number|Object} [maxPoints] Number of points for trace window after lengthening.
     *
     */
    prependTraces(gd: any|HTMLDivElement, update: any, indices: number|number[], maxPoints: number|any): Promise<plotly.PlotlyDiv>;

    /**
     * Add data traces to an existing graph div.
     *
     * @param {Object|HTMLDivElement} gd The graph div
     * @param {Object[]} gd.data The array of traces we're adding to
     * @param {Object[]|Object} traces The object or array of objects to add
     * @param {Number[]|Number} [newIndices=[gd.data.length]] Locations to add traces
     *
     */
    addTraces(gd: any|HTMLDivElement, traces: plotly.traces.BaseTrace|plotly.traces.BaseTrace[], newIndices: number|number[]): Promise<plotly.PlotlyDiv>;

    /**
     * Delete traces at `indices` from gd.data array.
     *
     * @param {Object|HTMLDivElement} gd The graph div
     * @param {Object[]} gd.data The array of traces we're removing from
     * @param {Number|Number[]} indices The indices
     */
    deleteTraces(gd: any|HTMLDivElement, indices: number|number[]): Promise<plotly.PlotlyDiv>;

    /**
     * Move traces at currentIndices array to locations in newIndices array.
     *
     * If newIndices is omitted, currentIndices will be moved to the end. E.g.,
     * these are equivalent:
     *
     * Plotly.moveTraces(gd, [1, 2, 3], [-3, -2, -1])
     * Plotly.moveTraces(gd, [1, 2, 3])
     *
     * @param {Object|HTMLDivElement} gd The graph div
     * @param {Object[]} gd.data The array of traces we're removing from
     * @param {Number|Number[]} currentIndices The locations of traces to be moved
     * @param {Number|Number[]} [newIndices] The locations to move traces to
     *
     * Example calls:
     *
     *    // move trace i to location x
     *    Plotly.moveTraces(gd, i, x)
     *
     *    // move trace i to end of array
     *    Plotly.moveTraces(gd, i)
     *
     *    // move traces i, j, k to end of array (i != j != k)
     *    Plotly.moveTraces(gd, [i, j, k])
     *
     *    // move traces [i, j, k] to [x, y, z] (i != j != k) (x != y != z)
     *    Plotly.moveTraces(gd, [i, j, k], [x, y, z])
     *
     *    // reorder all traces (assume there are 5--a, b, c, d, e)
     *    Plotly.moveTraces(gd, [b, d, e, a, c])  // same as 'move to end'
     */
    moveTraces(gd: any|HTMLDivElement, currentIndices: number|number[], newIndices: number|number[]): Promise<plotly.PlotlyDiv>;

    /**
     * restyle: update trace attributes of an existing plot
     *
     * Can be called two ways.
     *
     * Signature 1:
     * @param {String | HTMLDivElement} gd
     *  the id or DOM element of the graph container div
     * @param {String} astr
     *  attribute string (like `'marker.symbol'`) to update
     * @param {*} val
     *  value to give this attribute
     * @param {Number[] | Number} [traces]
     *  integer or array of integers for the traces to alter (all if omitted)
     *
     * Signature 2:
     * @param {String | HTMLDivElement} gd
     *  (as in signature 1)
     * @param {Object} aobj
     *  attribute object `{astr1: val1, astr2: val2 ...}`
     *  allows setting multiple attributes simultaneously
     * @param {Number[] | Number} [traces]
     *  (as in signature 1)
     *
     * `val` (or `val1`, `val2` ... in the object form) can be an array,
     * to apply different values to each trace.
     *
     * If the array is too short, it will wrap around (useful for
     * style files that want to specify cyclical default values).
     */
    restyle(gd: string|HTMLDivElement, val: any, traces?: number|number[]): Promise<plotly.PlotlyDiv>;

    /**
     * relayout: update layout attributes of an existing plot
     *
     * Can be called two ways:
     *
     * Signature 1:
     * @param {String | HTMLDivElement} gd
     *  the id or dom element of the graph container div
     * @param {String} astr
     *  attribute string (like `'xaxis.range[0]'`) to update
     * @param {*} val
     *  value to give this attribute
     *
     * Signature 2:
     * @param {String | HTMLDivElement} gd
     *  (as in signature 1)
     * @param {Object} aobj
     *  attribute object `{astr1: val1, astr2: val2 ...}`
     *  allows setting multiple attributes simultaneously
     */
    relayout(gd: string|HTMLDivElement, astr: string|{[key: string]: any}, val?: any): Promise<plotly.PlotlyDiv>;

    /**
     * update: update trace and layout attributes of an existing plot
     *
     * @param {String | HTMLDivElement} gd
     *  the id or DOM element of the graph container div
     * @param {Object} traceUpdate
     *  attribute object `{astr1: val1, astr2: val2 ...}`
     *  corresponding to updates in the plot's traces
     * @param {Object} layoutUpdate
     *  attribute object `{astr1: val1, astr2: val2 ...}`
     *  corresponding to updates in the plot's layout
     * @param {Number[] | Number} [traces]
     *  integer or array of integers for the traces to alter (all if omitted)
     *
     */
    update(gd: string|HTMLDivElement, traceUpdate?: {[key: string]: any}, layoutUpdate?: {[key: string]: any}, traces?: number|number[]): Promise<plotly.PlotlyDiv>;

    /**
     * Animate to a frame, sequence of frame, frame group, or frame definition
     *
     * @param {string id or DOM element} gd
     *    the id or DOM element of the graph container div
     *
     * @param {string or object or array of strings or array of objects} frameOrGroupNameOrFrameList
     *    a single frame, array of frames, or group to which to animate. The intent is
     *    inferred by the type of the input. Valid inputs are:
     *
     *    - string, e.g. 'groupname': animate all frames of a given `group` in the order
     *      in which they are defined via `Plotly.addFrames`.
     *
     *    - array of strings, e.g. ['frame1', frame2']: a list of frames by name to which
     *      to animate in sequence
     *
     *    - object: {data: ...}: a frame definition to which to animate. The frame is not
     *      and does not need to be added via `Plotly.addFrames`. It may contain any of
     *      the properties of a frame, including `data`, `layout`, and `traces`. The
     *      frame is used as provided and does not use the `baseframe` property.
     *
     *    - array of objects, e.g. [{data: ...}, {data: ...}]: a list of frame objects,
     *      each following the same rules as a single `object`.
     *
     * @param {object} animationOpts
     *    configuration for the animation
     */
    animate(gd: string|HTMLDivElement, frameOrGroupNameOrFrameList: string|string[]|any|any[], animationOpts: any): Promise<plotly.PlotlyDiv>;

    /**
     * Register new frames
     *
     * @param {string id or DOM element} gd
     *    the id or DOM element of the graph container div
     *
     * @param {array of objects} frameList
     *    list of frame definitions, in which each object includes any of:
     *    - name: {string} name of frame to add
     *    - data: {array of objects} trace data
     *    - layout {object} layout definition
     *    - traces {array} trace indices
     *    - baseframe {string} name of frame from which this frame gets defaults
     *
     *  @param {array of integers) indices
     *    an array of integer indices matching the respective frames in `frameList`. If not
     *    provided, an index will be provided in serial order. If already used, the frame
     *    will be overwritten.
     */
    addFrames(gd: string|HTMLDivElement, frameList: any[], indices?: number[]): Promise<plotly.PlotlyDiv>;

    /**
     * Delete frame
     *
     * @param {string id or DOM element} gd
     *    the id or DOM element of the graph container div
     *
     * @param {array of integers} frameList
     *    list of integer indices of frames to be deleted
     */
    deleteFrames(gd: string|HTMLDivElement, frameList: number[]): Promise<plotly.PlotlyDiv>;

    /**
     * Purge a graph container div back to its initial pre-Plotly.plot state
     *
     * @param {string id or DOM element} gd
     *    the id or DOM element of the graph container div
     */
    purge(gd: string|HTMLDivElement): void;

    /**
     * Create a plot image
     *
     * @param {string id or DOM element} gd
     *    the id or DOM element of the graph container div
     *
     * @param opts
     *    Image export options
     *
     * @param opts.format
     *    Image export format (png, jpeg, webp, or svg)
     *
     * @param opts.width
     *    Image width in pixels
     *
     * @param opts.height
     *    Image height in pixels
     *
     * @param opts.setBackground
     *    Sets the image background mode. By default, the image background is determined by `layout.paper_bgcolor`, the *transparent* mode.
     *    One might consider setting `setBackground` to *opaque* when exporting a *jpeg* image as JPEGs do not support opacity.'
     *
     * @param opts.imageDataOnly
     *    Determines whether or not the return value is prefixed by the image format's corresponding 'data:image;' spec.
     */
    toImage(gd: string|HTMLDivElement, opts: { format: "png"|"jpeg"|"webp"|"svg", width: number, height: number, setBackground?: boolean|string, imageDataOnly?: boolean }): void;

    /**
     * Download plot image
     *
     * @param {string id or DOM element} gd
     *    the id or DOM element of the graph container div
     *
     * @param opts
     *    Image export options
     *
     * @param opts.format
     *    Image export format (png, jpeg, webp, or svg)
     *
     * @param opts.width
     *    Image width in pixels
     *
     * @param opts.height
     *    Image height in pixels
     *
     * @param opts.filename
     *    File name for the image
     *
     * @param opts.setBackground
     *    Sets the image background mode. By default, the image background is determined by `layout.paper_bgcolor`, the *transparent* mode.
     *    One might consider setting `setBackground` to *opaque* when exporting a *jpeg* image as JPEGs do not support opacity.'
     *
     * @param opts.imageDataOnly
     *    Determines whether or not the return value is prefixed by the image format's corresponding 'data:image;' spec.
     */
    downloadImage(gd: string|HTMLDivElement, opts: { format: "png"|"jpeg"|"webp"|"svg", width: number, height: number, filename: string, setBackground?: boolean|string, imageDataOnly?: boolean }): void;

    /**
     * D3 object
     */
    d3: any;

    /**
     * Underlying plot-related functions not exposed via Plotly object for various reasons.
     */
    Plots: {
      /**
       * Trigger resize of the Plotly chart div.
       *
       * @param {string id or DOM element} gd
       *    the id or DOM element of the graph container div
       */
      resize(gd: string|HTMLDivElement): Promise<plotly.PlotlyDiv>;

      /**
       * JSONify the graph data and layout
       *
       * This function needs to recurse because some src can be inside
       * sub-objects.
       *
       * It also strips out functions and private (starts with _) elements.
       * Therefore, we can add temporary things to data and layout that don't
       * get saved.
       *
       * @param gd The graphDiv
       * @param {Boolean} dataonly If true, don't return layout.
       * @param {'keepref'|'keepdata'|'keepall'} [mode='keepref'] Filter what's kept
       *      keepref: remove data for which there's a src present
       *          eg if there's xsrc present (and xsrc is well-formed,
       *          ie has : and some chars before it), strip out x
       *      keepdata: remove all src tags, don't remove the data itself
       *      keepall: keep data and src
       * @param {String} output If you specify 'object', the result will not be stringified
       * @param {Boolean} useDefaults If truthy, use _fullLayout and _fullData
       * @returns {Object|String}
       */
      graphJson(gd: string|HTMLDivElement, dataonly?: boolean, mode?: 'keepref'|'keepdata'|'keepall', output?: string, useDefaults?: boolean ): string|any;
    };

    /**
     * Plotly mode icons
     */
    Icons: {
      [key: string]: {
        ascent: number,
        descent: number,
        path: string,
        width: number
      }
    };

  }
}

declare var Plotly: plotly.Plotly;

/* tslint:enable */
